/* The following code was generated by JFlex 1.4.1 on 10/23/13 1:02 AM */

/*
 * Generated on 10/23/13 1:02 AM
 */
package acumen.ui.tl;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class AcumenTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\10\1\0\1\20\1\16\22\0\1\20\1\30\1\15"+
    "\1\17\1\1\1\36\1\70\1\7\2\34\1\22\1\33\1\30\1\26"+
    "\1\24\1\21\1\4\1\65\1\62\1\6\4\6\2\3\1\46\1\30"+
    "\1\73\1\72\1\75\1\30\1\31\2\5\1\50\1\53\2\5\13\1"+
    "\1\67\10\1\1\74\1\11\1\32\1\71\1\2\1\0\1\55\1\14"+
    "\1\54\1\57\1\25\1\43\1\64\1\37\1\44\1\1\1\63\1\45"+
    "\1\56\1\52\1\51\1\41\1\66\1\13\1\42\1\40\1\12\1\60"+
    "\1\47\1\23\1\61\1\1\1\27\1\76\1\27\1\35\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\1\3\2\1\1\4\1\5\2\6"+
    "\3\1\1\7\1\6\7\1\1\6\12\1\5\6\1\10"+
    "\1\11\5\10\1\12\3\10\1\0\1\13\1\0\2\13"+
    "\4\1\2\4\1\14\1\15\1\16\1\1\1\17\3\1"+
    "\1\0\6\1\1\20\7\1\1\21\23\1\1\0\1\22"+
    "\11\0\1\17\1\0\1\23\3\1\1\4\1\24\1\4"+
    "\4\1\1\20\3\1\1\20\15\1\12\0\1\1\1\4"+
    "\12\1\1\20\2\1\2\0\1\25\2\0\1\26\1\0"+
    "\1\4\10\1\5\0\1\4\10\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\275"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\275\0\u02f4\0\u0333"+
    "\0\u0372\0\275\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec"+
    "\0\u052b\0\u056a\0\u03f0\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5"+
    "\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d"+
    "\0\u08dc\0\u091b\0\u095a\0\275\0\u0999\0\u09d8\0\u0a17\0\u0a56"+
    "\0\u0a95\0\275\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f"+
    "\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07"+
    "\0\275\0\275\0\275\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42"+
    "\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\374"+
    "\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\374"+
    "\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac"+
    "\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4"+
    "\0\u16e3\0\u1722\0\u1761\0\u17a0\0\275\0\u17df\0\u181e\0\u185d"+
    "\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55"+
    "\0\u0c8d\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\275\0\u1b90\0\u1bcf"+
    "\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7"+
    "\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf"+
    "\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7"+
    "\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af"+
    "\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7"+
    "\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f"+
    "\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919\0\u2958\0\u2997"+
    "\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\u2ad2\0\u2b11\0\u2b50\0\u27de"+
    "\0\u2b8f\0\u289b\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09"+
    "\0\u2d48\0\u2d87\0\u2dc6\0\u2e05";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\5\1\6\1\4\1\10"+
    "\1\4\1\5\1\11\1\12\1\13\2\4\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\16\1\22\1\4\1\16"+
    "\1\22\1\23\1\22\1\24\1\16\1\5\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\5"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\5\1\44"+
    "\1\6\1\5\1\45\1\6\2\5\1\46\1\16\1\47"+
    "\1\50\1\22\1\51\1\52\10\53\1\54\11\53\1\55"+
    "\14\53\1\56\3\53\1\57\3\53\1\60\27\53\10\61"+
    "\1\62\26\61\1\63\3\61\1\64\3\61\1\65\27\61"+
    "\100\0\6\5\2\0\1\66\3\5\6\0\1\5\1\0"+
    "\1\5\11\0\7\5\1\0\21\5\7\0\3\67\2\6"+
    "\1\67\1\6\2\0\4\67\2\0\1\67\3\0\1\67"+
    "\1\70\1\71\3\0\1\67\5\0\7\67\1\0\13\67"+
    "\1\6\2\67\1\6\2\67\7\0\3\67\2\6\1\67"+
    "\1\6\2\0\4\67\2\0\1\67\3\0\1\72\1\70"+
    "\1\71\3\0\1\67\5\0\7\67\1\0\13\67\1\6"+
    "\2\67\1\6\2\67\10\0\6\5\2\0\1\66\3\5"+
    "\6\0\1\5\1\0\1\73\11\0\5\5\1\74\1\5"+
    "\1\0\2\5\1\75\16\5\10\0\6\5\2\0\1\66"+
    "\3\5\6\0\1\5\1\0\1\5\11\0\6\5\1\76"+
    "\1\0\21\5\7\0\10\13\1\77\1\100\3\13\1\101"+
    "\61\13\20\0\1\14\77\0\1\102\1\103\55\0\6\5"+
    "\2\0\1\66\3\5\6\0\1\5\1\0\1\5\11\0"+
    "\7\5\1\0\2\5\1\104\16\5\12\0\2\105\1\0"+
    "\1\105\12\0\2\16\1\0\1\16\1\0\1\16\4\0"+
    "\1\16\26\0\1\105\2\0\1\105\3\0\1\16\6\0"+
    "\6\5\2\0\1\66\3\5\6\0\1\106\1\0\1\5"+
    "\11\0\6\5\1\107\1\0\3\5\1\110\15\5\30\0"+
    "\1\111\147\0\1\16\5\0\6\5\2\0\1\66\1\5"+
    "\1\112\1\5\6\0\1\5\1\0\1\113\11\0\7\5"+
    "\1\0\2\5\1\114\3\5\1\115\3\5\1\116\6\5"+
    "\10\0\6\5\2\0\1\66\1\5\1\117\1\5\6\0"+
    "\1\5\1\0\1\5\11\0\5\5\1\120\1\5\1\0"+
    "\21\5\10\0\6\5\2\0\1\66\1\121\2\5\6\0"+
    "\1\5\1\0\1\5\11\0\5\5\1\122\1\5\1\0"+
    "\1\123\16\5\1\124\1\5\10\0\6\5\2\0\1\66"+
    "\3\5\6\0\1\5\1\0\1\5\11\0\6\5\1\125"+
    "\1\0\2\5\1\126\3\5\1\127\12\5\10\0\6\5"+
    "\2\0\1\66\3\5\6\0\1\5\1\0\1\5\11\0"+
    "\4\5\1\130\2\5\1\0\3\5\1\130\15\5\10\0"+
    "\6\5\2\0\1\66\3\5\6\0\1\5\1\0\1\5"+
    "\11\0\7\5\1\0\2\5\1\131\16\5\10\0\6\5"+
    "\2\0\1\66\3\5\6\0\1\5\1\0\1\5\11\0"+
    "\1\132\6\5\1\0\21\5\10\0\6\5\2\0\1\66"+
    "\3\5\6\0\1\5\1\0\1\5\11\0\7\5\1\0"+
    "\2\5\1\133\16\5\10\0\6\5\2\0\1\66\3\5"+
    "\6\0\1\5\1\0\1\5\11\0\7\5\1\0\2\5"+
    "\1\134\16\5\10\0\6\5\2\0\1\66\3\5\6\0"+
    "\1\5\1\0\1\5\11\0\5\5\1\135\1\5\1\0"+
    "\21\5\10\0\6\5\2\0\1\66\1\5\1\136\1\124"+
    "\6\0\1\5\1\0\1\137\11\0\6\5\1\140\1\0"+
    "\2\5\1\141\3\5\1\107\3\5\1\142\6\5\10\0"+
    "\6\5\2\0\1\66\2\5\1\143\6\0\1\5\1\0"+
    "\1\5\11\0\1\5\1\144\1\5\1\145\3\5\1\0"+
    "\5\5\1\146\13\5\10\0\6\5\2\0\1\66\3\5"+
    "\6\0\1\5\1\0\1\5\11\0\7\5\1\0\2\5"+
    "\1\147\3\5\1\150\12\5\10\0\6\5\2\0\1\66"+
    "\3\5\6\0\1\5\1\0\1\5\11\0\7\5\1\0"+
    "\2\5\1\151\16\5\10\0\6\5\2\0\1\66\3\5"+
    "\6\0\1\5\1\0\1\152\11\0\7\5\1\0\21\5"+
    "\10\0\6\5\2\0\1\66\1\5\1\153\1\5\6\0"+
    "\1\5\1\0\1\5\11\0\7\5\1\0\21\5\77\0"+
    "\1\16\100\0\1\16\1\0\1\154\74\0\2\16\75\0"+
    "\1\16\2\0\1\16\77\0\1\16\10\53\1\0\11\53"+
    "\1\0\14\53\1\0\3\53\1\0\3\53\1\0\27\53"+
    "\21\0\1\155\115\0\1\156\76\0\1\157\3\0\1\160"+
    "\101\0\1\161\27\0\10\61\1\0\26\61\1\0\3\61"+
    "\1\0\3\61\1\0\27\61\40\0\1\162\76\0\1\163"+
    "\3\0\1\164\101\0\1\165\41\0\1\166\64\0\7\67"+
    "\2\0\4\67\2\0\1\67\3\0\1\67\1\0\1\67"+
    "\3\0\1\67\5\0\7\67\1\0\21\67\12\0\2\105"+
    "\1\0\1\105\53\0\1\105\2\0\1\105\11\0\3\67"+
    "\2\167\1\67\1\167\2\0\4\67\2\0\1\67\3\0"+
    "\1\67\1\0\1\67\1\170\2\0\1\67\1\0\1\170"+
    "\3\0\7\67\1\0\13\67\1\167\2\67\1\167\2\67"+
    "\7\0\3\67\4\171\2\0\3\67\1\171\2\0\1\67"+
    "\3\0\1\67\1\0\1\171\3\0\1\67\5\0\4\67"+
    "\1\171\2\67\1\0\1\67\1\171\2\67\3\171\1\67"+
    "\1\171\2\67\1\171\2\67\1\171\2\67\10\0\6\5"+
    "\2\0\1\66\3\5\6\0\1\5\1\0\1\5\11\0"+
    "\7\5\1\0\10\5\1\120\10\5\10\0\6\5\2\0"+
    "\1\66\3\5\6\0\1\5\1\0\1\5\11\0\7\5"+
    "\1\0\3\5\1\151\15\5\10\0\6\5\2\0\1\66"+
    "\1\172\2\5\6\0\1\5\1\0\1\5\11\0\7\5"+
    "\1\0\21\5\10\0\6\5\2\0\1\66\1\173\2\5"+
    "\6\0\1\5\1\0\1\5\11\0\7\5\1\0\6\5"+
    "\1\174\12\5\7\0\11\77\1\175\3\77\1\176\65\77"+
    "\1\13\1\77\2\13\1\0\1\13\1\177\3\13\22\77"+
    "\1\13\2\77\1\13\6\77\1\13\7\77\1\13\2\77"+
    "\1\13\11\77\1\0\6\5\2\0\1\66\1\5\1\120"+
    "\1\5\6\0\1\5\1\0\1\5\11\0\7\5\1\0"+
    "\21\5\7\0\3\67\2\105\1\67\1\105\2\0\4\67"+
    "\2\0\1\67\3\0\1\67\1\0\1\71\3\0\1\67"+
    "\5\0\7\67\1\0\13\67\1\105\2\67\1\105\2\67"+
    "\10\0\6\5\2\0\1\66\3\5\6\0\1\5\1\0"+
    "\1\5\11\0\2\5\1\120\4\5\1\0\21\5\10\0"+
    "\6\5\2\0\1\66\3\5\6\0\1\5\1\0\1\5"+
    "\11\0\3\5\1\200\3\5\1\0\21\5\10\0\6\5"+
    "\2\0\1\66\3\5\6\0\1\5\1\0\1\5\11\0"+
    "\7\5\1\0\10\5\1\130\10\5\35\0\1\16\51\0"+
    "\6\5\2\0\1\66\1\200\2\5\6\0\1\5\1\0"+
    "\1\5\11\0\7\5\1\0\21\5\10\0\6\5\2\0"+
    "\1\66\1\5\1\201\1\5\6\0\1\5\1\0\1\5"+
    "\11\0\7\5\1\0\21\5\10\0\6\5\2\0\1\66"+
    "\3\5\6\0\1\5\1\0\1\5\11\0\7\5\1\0"+
    "\4\5\1\202\13\5\1\203\10\0\6\5\2\0\1\66"+
    "\3\5\6\0\1\5\1\0\1\5\11\0\7\5\1\0"+
    "\3\5\1\204\15\5\10\0\6\5\2\0\1\66\3\5"+
    "\6\0\1\5\1\0\1\5\11\0\2\5\1\200\4\5"+
    "\1\0\21\5\10\0\6\5\2\0\1\66\3\5\6\0"+
    "\1\5\1\0\1\5\11\0\5\5\1\205\1\5\1\0"+
    "\21\5\10\0\6\5\2\0\1\66\3\5\6\0\1\5"+
    "\1\0\1\5\11\0\7\5\1\0\7\5\1\130\11\5"+
    "\10\0\6\5\2\0\1\66\3\5\6\0\1\5\1\0"+
    "\1\5\11\0\7\5\1\0\3\5\1\204\11\5\1\206"+
    "\3\5\10\0\6\5\2\0\1\66\3\5\6\0\1\5"+
    "\1\0\1\5\11\0\5\5\1\207\1\5\1\0\21\5"+
    "\10\0\6\5\2\0\1\66\1\5\1\151\1\5\6\0"+
    "\1\5\1\0\1\5\11\0\7\5\1\0\21\5\10\0"+
    "\6\5\2\0\1\66\3\5\6\0\1\5\1\0\1\5"+
    "\11\0\7\5\1\0\2\5\1\17\16\5\10\0\6\5"+
    "\2\0\1\66\1\5\1\130\1\5\6\0\1\5\1\0"+
    "\1\5\11\0\7\5\1\0\21\5\10\0\6\5\2\0"+
    "\1\66\3\5\6\0\1\5\1\0\1\5\11\0\6\5"+
    "\1\107\1\0\21\5\10\0\6\5\2\0\1\66\3\5"+
    "\6\0\1\5\1\0\1\5\11\0\7\5\1\0\15\5"+
    "\1\210\3\5\10\0\6\5\2\0\1\66\3\5\6\0"+
    "\1\5\1\0\1\5\11\0\5\5\1\211\1\5\1\0"+
    "\21\5\10\0\6\5\2\0\1\66\3\5\6\0\1\5"+
    "\1\0\1\5\11\0\7\5\1\0\3\5\1\212\15\5"+
    "\10\0\6\5\2\0\1\66\1\5\1\213\1\5\6\0"+
    "\1\5\1\0\1\5\11\0\1\5\1\120\5\5\1\0"+
    "\3\5\1\200\15\5\10\0\6\5\2\0\1\66\3\5"+
    "\6\0\1\5\1\0\1\5\11\0\3\5\1\214\3\5"+
    "\1\0\21\5\10\0\6\5\2\0\1\66\3\5\6\0"+
    "\1\5\1\0\1\215\11\0\7\5\1\0\2\5\1\216"+
    "\16\5\10\0\6\5\2\0\1\66\3\5\6\0\1\5"+
    "\1\0\1\5\11\0\5\5\1\217\1\5\1\0\21\5"+
    "\10\0\6\5\2\0\1\66\3\5\6\0\1\5\1\0"+
    "\1\5\11\0\7\5\1\0\6\5\1\220\12\5\10\0"+
    "\6\5\2\0\1\66\3\5\6\0\1\5\1\0\1\5"+
    "\11\0\3\5\1\204\3\5\1\0\21\5\10\0\6\5"+
    "\2\0\1\66\3\5\6\0\1\5\1\0\1\5\11\0"+
    "\7\5\1\0\6\5\1\221\12\5\10\0\6\5\2\0"+
    "\1\66\3\5\6\0\1\5\1\0\1\5\11\0\3\5"+
    "\1\120\3\5\1\0\21\5\10\0\6\5\2\0\1\66"+
    "\3\5\6\0\1\5\1\0\1\5\11\0\7\5\1\0"+
    "\6\5\1\222\12\5\10\0\6\5\2\0\1\66\3\5"+
    "\6\0\1\5\1\0\1\5\11\0\5\5\1\221\1\5"+
    "\1\0\21\5\10\0\6\5\2\0\1\66\3\5\6\0"+
    "\1\5\1\0\1\5\11\0\7\5\1\0\2\5\1\143"+
    "\16\5\10\0\6\5\2\0\1\66\3\5\6\0\1\5"+
    "\1\0\1\5\11\0\7\5\1\0\11\5\1\200\7\5"+
    "\10\0\6\5\2\0\1\66\3\5\6\0\1\5\1\0"+
    "\1\5\11\0\7\5\1\0\15\5\1\223\3\5\10\0"+
    "\6\5\2\0\1\66\3\5\6\0\1\5\1\0\1\5"+
    "\11\0\1\5\1\120\5\5\1\0\21\5\10\0\6\5"+
    "\2\0\1\66\3\5\6\0\1\5\1\0\1\5\11\0"+
    "\6\5\1\224\1\0\21\5\10\0\6\5\2\0\1\66"+
    "\3\5\6\0\1\5\1\0\1\225\11\0\7\5\1\0"+
    "\21\5\47\0\1\226\3\0\1\226\72\0\1\227\77\0"+
    "\1\230\102\0\1\231\100\0\1\232\67\0\1\233\77\0"+
    "\1\234\102\0\1\235\100\0\1\236\32\0\4\237\5\0"+
    "\1\237\10\0\1\237\15\0\1\237\4\0\1\237\2\0"+
    "\3\237\1\0\1\237\2\0\1\237\2\0\1\237\11\0"+
    "\3\67\2\167\1\67\1\167\2\0\4\67\2\0\1\67"+
    "\3\0\1\67\1\0\1\67\3\0\1\67\5\0\7\67"+
    "\1\0\13\67\1\167\2\67\1\167\2\67\12\0\2\167"+
    "\1\0\1\167\53\0\1\167\2\0\1\167\12\0\6\5"+
    "\2\0\1\66\3\5\6\0\1\5\1\0\1\5\11\0"+
    "\7\5\1\0\3\5\1\73\15\5\10\0\6\5\2\0"+
    "\1\66\3\5\6\0\1\5\1\0\1\120\11\0\7\5"+
    "\1\0\21\5\10\0\6\5\2\0\1\66\3\5\6\0"+
    "\1\5\1\0\1\5\11\0\7\5\1\0\5\5\1\240"+
    "\13\5\7\0\10\77\1\0\71\77\4\241\2\77\1\175"+
    "\2\77\1\241\1\176\7\77\1\241\15\77\1\241\4\77"+
    "\1\241\2\77\3\241\1\77\1\241\2\77\1\241\2\77"+
    "\1\241\11\77\1\0\6\5\2\0\1\66\3\5\6\0"+
    "\1\5\1\0\1\130\11\0\7\5\1\0\21\5\10\0"+
    "\6\5\2\0\1\66\3\5\6\0\1\5\1\0\1\5"+
    "\11\0\7\5\1\0\7\5\1\242\11\5\10\0\6\5"+
    "\2\0\1\66\3\5\6\0\1\5\1\0\1\243\11\0"+
    "\7\5\1\0\21\5\10\0\6\5\2\0\1\66\3\5"+
    "\6\0\1\5\1\0\1\5\11\0\7\5\1\0\6\5"+
    "\1\244\12\5\10\0\6\5\2\0\1\66\3\5\6\0"+
    "\1\5\1\0\1\5\11\0\1\120\6\5\1\0\21\5"+
    "\10\0\6\5\2\0\1\66\3\5\6\0\1\5\1\0"+
    "\1\5\11\0\7\5\1\0\11\5\1\215\7\5\10\0"+
    "\6\5\2\0\1\66\3\5\6\0\1\5\1\0\1\5"+
    "\11\0\7\5\1\0\3\5\1\245\15\5\10\0\6\5"+
    "\2\0\1\66\3\5\6\0\1\5\1\0\1\5\11\0"+
    "\1\5\1\246\5\5\1\0\21\5\10\0\6\5\2\0"+
    "\1\66\3\5\6\0\1\5\1\0\1\5\11\0\7\5"+
    "\1\0\16\5\1\247\2\5\10\0\6\5\2\0\1\66"+
    "\3\5\6\0\1\5\1\0\1\5\11\0\1\5\1\173"+
    "\5\5\1\0\21\5\10\0\6\5\2\0\1\66\3\5"+
    "\6\0\1\5\1\0\1\5\11\0\1\5\1\250\5\5"+
    "\1\0\21\5\10\0\6\5\2\0\1\66\3\5\6\0"+
    "\1\5\1\0\1\5\11\0\7\5\1\0\7\5\1\120"+
    "\11\5\10\0\6\5\2\0\1\66\3\5\6\0\1\5"+
    "\1\0\1\5\11\0\7\5\1\0\5\5\1\251\13\5"+
    "\10\0\6\5\2\0\1\66\3\5\6\0\1\5\1\0"+
    "\1\5\11\0\7\5\1\0\6\5\1\252\12\5\10\0"+
    "\6\5\2\0\1\66\3\5\6\0\1\5\1\0\1\5"+
    "\11\0\3\5\1\143\3\5\1\0\21\5\10\0\6\5"+
    "\2\0\1\66\3\5\6\0\1\5\1\0\1\5\11\0"+
    "\6\5\1\120\1\0\21\5\10\0\6\5\2\0\1\66"+
    "\3\5\6\0\1\5\1\0\1\5\11\0\3\5\1\253"+
    "\1\5\1\121\1\5\1\0\21\5\10\0\6\5\2\0"+
    "\1\66\3\5\6\0\1\5\1\0\1\5\11\0\7\5"+
    "\1\0\3\5\1\120\15\5\10\0\6\5\2\0\1\66"+
    "\3\5\6\0\1\5\1\0\1\5\11\0\7\5\1\0"+
    "\3\5\1\254\15\5\10\0\6\5\2\0\1\66\3\5"+
    "\6\0\1\5\1\0\1\255\11\0\7\5\1\0\21\5"+
    "\10\0\6\5\2\0\1\66\3\5\6\0\1\5\1\0"+
    "\1\5\11\0\6\5\1\256\1\0\21\5\10\0\6\5"+
    "\2\0\1\66\3\5\6\0\1\5\1\0\1\221\11\0"+
    "\7\5\1\0\21\5\41\0\1\16\105\0\1\257\103\0"+
    "\1\260\55\0\1\230\75\0\1\261\113\0\1\262\103\0"+
    "\1\263\55\0\1\234\75\0\1\264\55\0\4\265\5\0"+
    "\1\265\10\0\1\265\15\0\1\265\4\0\1\265\2\0"+
    "\3\265\1\0\1\265\2\0\1\265\2\0\1\265\12\0"+
    "\6\5\2\0\1\66\3\5\6\0\1\5\1\0\1\5"+
    "\11\0\7\5\1\0\14\5\1\120\4\5\7\0\3\77"+
    "\4\266\2\77\1\175\2\77\1\266\1\176\7\77\1\266"+
    "\15\77\1\266\4\77\1\266\2\77\3\266\1\77\1\266"+
    "\2\77\1\266\2\77\1\266\11\77\1\0\6\5\2\0"+
    "\1\66\3\5\6\0\1\5\1\0\1\5\11\0\5\5"+
    "\1\267\1\5\1\0\21\5\10\0\6\5\2\0\1\66"+
    "\3\5\6\0\1\5\1\0\1\5\11\0\7\5\1\0"+
    "\15\5\1\270\3\5\10\0\6\5\2\0\1\66\3\5"+
    "\6\0\1\5\1\0\1\5\11\0\7\5\1\0\10\5"+
    "\1\271\10\5\10\0\6\5\2\0\1\66\1\213\2\5"+
    "\6\0\1\5\1\0\1\5\11\0\7\5\1\0\21\5"+
    "\10\0\6\5\2\0\1\66\3\5\6\0\1\5\1\0"+
    "\1\5\11\0\7\5\1\0\5\5\1\272\13\5\10\0"+
    "\3\5\1\120\2\5\2\0\1\66\3\5\6\0\1\5"+
    "\1\0\1\5\11\0\7\5\1\0\21\5\10\0\6\5"+
    "\2\0\1\66\3\5\6\0\1\5\1\0\1\5\11\0"+
    "\5\5\1\273\1\5\1\0\21\5\10\0\6\5\2\0"+
    "\1\66\1\5\1\274\1\5\6\0\1\5\1\0\1\5"+
    "\11\0\7\5\1\0\21\5\10\0\6\5\2\0\1\66"+
    "\3\5\6\0\1\5\1\0\1\5\11\0\1\5\1\200"+
    "\5\5\1\0\21\5\10\0\6\5\2\0\1\66\3\5"+
    "\6\0\1\5\1\0\1\5\11\0\3\5\1\130\3\5"+
    "\1\0\21\5\10\0\6\5\2\0\1\66\3\5\6\0"+
    "\1\5\1\0\1\5\11\0\7\5\1\0\13\5\1\120"+
    "\5\5\10\0\6\5\2\0\1\66\3\5\6\0\1\5"+
    "\1\0\1\5\11\0\7\5\1\0\3\5\1\275\15\5"+
    "\10\0\6\5\2\0\1\66\3\5\6\0\1\5\1\0"+
    "\1\5\11\0\7\5\1\0\2\5\1\276\16\5\51\0"+
    "\1\230\3\0\1\260\51\0\1\277\56\0\1\261\1\300"+
    "\4\261\1\300\2\0\3\261\2\0\1\300\1\0\1\261"+
    "\1\300\1\261\1\300\1\261\1\300\1\0\7\300\7\261"+
    "\1\300\21\261\1\300\1\0\1\300\1\0\1\300\44\0"+
    "\1\234\3\0\1\263\51\0\1\301\56\0\1\264\1\302"+
    "\4\264\1\302\2\0\3\264\2\0\1\302\1\0\1\264"+
    "\1\302\1\264\1\302\1\264\1\302\1\0\7\302\7\264"+
    "\1\302\21\264\1\302\1\0\1\302\1\0\1\302\5\0"+
    "\4\303\5\0\1\303\10\0\1\303\15\0\1\303\4\0"+
    "\1\303\2\0\3\303\1\0\1\303\2\0\1\303\2\0"+
    "\1\303\11\0\3\77\4\304\2\77\1\175\2\77\1\304"+
    "\1\176\7\77\1\304\15\77\1\304\4\77\1\304\2\77"+
    "\3\304\1\77\1\304\2\77\1\304\2\77\1\304\11\77"+
    "\1\0\6\5\2\0\1\66\3\5\6\0\1\5\1\0"+
    "\1\5\11\0\7\5\1\0\3\5\1\215\15\5\10\0"+
    "\6\5\2\0\1\66\1\5\1\305\1\5\6\0\1\5"+
    "\1\0\1\5\11\0\7\5\1\0\21\5\10\0\6\5"+
    "\2\0\1\66\3\5\6\0\1\5\1\0\1\5\11\0"+
    "\5\5\1\306\1\5\1\0\21\5\10\0\6\5\2\0"+
    "\1\66\3\5\6\0\1\5\1\0\1\5\11\0\1\130"+
    "\6\5\1\0\21\5\10\0\6\5\2\0\1\66\3\5"+
    "\6\0\1\5\1\0\1\5\11\0\7\5\1\0\3\5"+
    "\1\307\15\5\10\0\6\5\2\0\1\66\3\5\6\0"+
    "\1\5\1\0\1\252\11\0\7\5\1\0\21\5\10\0"+
    "\6\5\2\0\1\66\3\5\6\0\1\5\1\0\1\5"+
    "\11\0\1\5\1\310\5\5\1\0\21\5\10\0\6\5"+
    "\2\0\1\66\3\5\6\0\1\5\1\0\1\5\11\0"+
    "\7\5\1\0\1\120\20\5\30\0\1\261\76\0\1\264"+
    "\60\0\4\5\5\0\1\5\10\0\1\5\15\0\1\5"+
    "\4\0\1\5\2\0\3\5\1\0\1\5\2\0\1\5"+
    "\2\0\1\5\11\0\3\77\4\13\2\77\1\175\2\77"+
    "\1\13\1\176\7\77\1\13\15\77\1\13\4\77\1\13"+
    "\2\77\3\13\1\77\1\13\2\77\1\13\2\77\1\13"+
    "\11\77\1\0\6\5\2\0\1\66\3\5\6\0\1\5"+
    "\1\0\1\311\11\0\7\5\1\0\21\5\10\0\6\5"+
    "\2\0\1\66\3\5\6\0\1\5\1\0\1\5\11\0"+
    "\7\5\1\0\6\5\1\312\12\5\10\0\6\5\2\0"+
    "\1\66\1\313\2\5\6\0\1\5\1\0\1\5\11\0"+
    "\7\5\1\0\21\5\10\0\6\5\2\0\1\66\3\5"+
    "\6\0\1\5\1\0\1\5\11\0\7\5\1\0\6\5"+
    "\1\120\12\5\10\0\6\5\2\0\1\66\3\5\6\0"+
    "\1\5\1\0\1\143\11\0\7\5\1\0\21\5\10\0"+
    "\6\5\2\0\1\66\3\5\6\0\1\5\1\0\1\5"+
    "\11\0\7\5\1\0\3\5\1\143\15\5\10\0\6\5"+
    "\2\0\1\66\3\5\6\0\1\5\1\0\1\5\11\0"+
    "\7\5\1\0\2\5\1\314\16\5\10\0\6\5\2\0"+
    "\1\66\1\253\2\5\6\0\1\5\1\0\1\5\11\0"+
    "\7\5\1\0\21\5\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11844];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\1\11\5\1\1\11\3\1\1\11"+
    "\31\1\1\11\5\1\1\11\3\1\1\0\1\1\1\0"+
    "\10\1\3\11\5\1\1\0\42\1\1\0\1\11\11\0"+
    "\1\1\1\0\5\1\1\11\27\1\12\0\17\1\2\0"+
    "\1\1\2\0\1\1\1\0\11\1\5\0\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public AcumenTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AcumenTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AcumenTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 23: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 24: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 25: break;
        case 19: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 26: break;
        case 20: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 27: break;
        case 15: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 28: break;
        case 17: 
          { addToken(Token.RESERVED_WORD);
          }
        case 29: break;
        case 7: 
          { addToken(Token.SEPARATOR);
          }
        case 30: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 31: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 32: break;
        case 13: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 33: break;
        case 16: 
          { addToken(Token.FUNCTION);
          }
        case 34: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 35: break;
        case 18: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 36: break;
        case 12: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 37: break;
        case 22: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 38: break;
        case 21: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 39: break;
        case 11: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 40: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 41: break;
        case 6: 
          { addToken(Token.OPERATOR);
          }
        case 42: break;
        case 8: 
          { 
          }
        case 43: break;
        case 9: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 44: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 205: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 206: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 207: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
