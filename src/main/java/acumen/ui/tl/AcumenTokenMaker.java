/* The following code was generated by JFlex 1.4.1 on 12/6/12 12:46 AM */

/*
 * Generated on 12/6/12 12:46 AM
 */
package acumen.ui.tl;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class AcumenTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\10\1\0\1\20\1\16\22\0\1\20\1\27\1\15"+
    "\1\17\1\1\1\35\1\66\1\7\2\33\1\67\1\32\1\27\1\25"+
    "\1\23\1\21\1\4\1\63\1\61\1\6\4\6\2\3\1\45\1\27"+
    "\1\72\1\71\1\74\1\27\1\30\2\5\1\47\1\52\2\5\13\1"+
    "\1\65\10\1\1\73\1\11\1\31\1\70\1\2\1\0\1\54\1\14"+
    "\1\53\1\56\1\24\1\42\1\62\1\36\1\43\2\1\1\44\1\55"+
    "\1\51\1\50\1\40\1\64\1\13\1\41\1\37\1\12\1\57\1\46"+
    "\1\22\1\60\1\1\1\26\1\75\1\26\1\34\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\3\1\1\6\1\7\1\6\7\1\1\6\7\1\5\6"+
    "\1\10\1\11\3\10\1\0\1\12\1\0\2\12\2\1"+
    "\2\4\1\13\1\14\1\1\1\15\3\1\1\0\6\1"+
    "\1\16\7\1\1\17\16\1\6\0\1\15\1\0\1\20"+
    "\1\1\1\4\1\21\1\4\4\1\1\16\3\1\1\16"+
    "\12\1\6\0\1\1\1\4\12\1\1\16\1\1\2\0"+
    "\1\22\1\0\1\4\6\1\3\0\1\4\7\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\174\0\u0174"+
    "\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\174\0\174"+
    "\0\u0326\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8"+
    "\0\u0364\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a"+
    "\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\174\0\u083c"+
    "\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c"+
    "\0\u0a6a\0\u0aa8\0\u0ae6\0\174\0\174\0\u0b24\0\u0b62\0\u0ba0"+
    "\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90"+
    "\0\u0dce\0\272\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42"+
    "\0\u0f80\0\272\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4"+
    "\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4"+
    "\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4"+
    "\0\u09ee\0\u1512\0\u1550\0\174\0\u158e\0\u15cc\0\u160a\0\u1648"+
    "\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838"+
    "\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28"+
    "\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18"+
    "\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08"+
    "\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8"+
    "\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8"+
    "\0\u1fba\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a"+
    "\0\u23d8\0\u2416";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\4\1\5\1\3\1\7"+
    "\1\3\1\4\1\10\1\4\1\11\2\3\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\3\1\17\1\20"+
    "\1\21\1\20\1\22\1\17\1\4\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\4\1\32\1\4\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\2\4\1\5\1\4"+
    "\1\5\2\4\1\41\2\17\1\42\1\43\1\20\1\44"+
    "\1\45\10\46\1\47\25\46\1\50\3\46\1\51\3\46"+
    "\1\52\27\46\77\0\6\4\2\0\1\53\3\4\5\0"+
    "\1\4\1\0\1\4\11\0\7\4\1\0\20\4\10\0"+
    "\3\54\2\5\1\54\1\5\2\0\4\54\2\0\1\54"+
    "\2\0\1\54\1\55\1\56\3\0\1\54\5\0\7\54"+
    "\1\0\13\54\1\5\1\54\1\5\2\54\10\0\3\54"+
    "\2\5\1\54\1\5\2\0\4\54\2\0\1\54\2\0"+
    "\1\57\1\55\1\56\3\0\1\54\5\0\7\54\1\0"+
    "\13\54\1\5\1\54\1\5\2\54\11\0\6\4\2\0"+
    "\1\53\3\4\5\0\1\4\1\0\1\4\11\0\5\4"+
    "\1\60\1\4\1\0\2\4\1\61\15\4\10\0\10\11"+
    "\1\62\1\63\3\11\1\64\60\11\20\0\1\12\76\0"+
    "\1\65\55\0\6\4\2\0\1\53\3\4\5\0\1\4"+
    "\1\0\1\4\11\0\7\4\1\0\2\4\1\66\15\4"+
    "\13\0\2\67\1\0\1\67\12\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\1\17\26\0\1\67\1\0\1\67"+
    "\3\0\2\17\6\0\6\4\2\0\1\53\3\4\5\0"+
    "\1\70\1\0\1\4\11\0\6\4\1\71\1\0\3\4"+
    "\1\72\14\4\31\0\1\73\145\0\1\17\5\0\6\4"+
    "\2\0\1\53\1\4\1\74\1\4\5\0\1\4\1\0"+
    "\1\75\11\0\7\4\1\0\2\4\1\76\3\4\1\77"+
    "\3\4\1\100\5\4\11\0\6\4\2\0\1\53\1\4"+
    "\1\101\1\4\5\0\1\4\1\0\1\4\11\0\5\4"+
    "\1\102\1\4\1\0\20\4\11\0\6\4\2\0\1\53"+
    "\1\103\2\4\5\0\1\4\1\0\1\4\11\0\5\4"+
    "\1\104\1\4\1\0\1\105\15\4\1\106\1\4\11\0"+
    "\6\4\2\0\1\53\3\4\5\0\1\4\1\0\1\4"+
    "\11\0\6\4\1\107\1\0\2\4\1\110\3\4\1\111"+
    "\11\4\11\0\6\4\2\0\1\53\3\4\5\0\1\4"+
    "\1\0\1\4\11\0\4\4\1\112\2\4\1\0\3\4"+
    "\1\112\14\4\11\0\6\4\2\0\1\53\3\4\5\0"+
    "\1\4\1\0\1\4\11\0\7\4\1\0\2\4\1\113"+
    "\15\4\11\0\6\4\2\0\1\53\3\4\5\0\1\4"+
    "\1\0\1\4\11\0\7\4\1\0\2\4\1\114\15\4"+
    "\11\0\6\4\2\0\1\53\3\4\5\0\1\4\1\0"+
    "\1\4\11\0\7\4\1\0\2\4\1\115\15\4\11\0"+
    "\6\4\2\0\1\53\3\4\5\0\1\4\1\0\1\4"+
    "\11\0\5\4\1\116\1\4\1\0\20\4\11\0\6\4"+
    "\2\0\1\53\1\4\1\117\1\106\5\0\1\4\1\0"+
    "\1\120\11\0\6\4\1\121\1\0\2\4\1\122\3\4"+
    "\1\71\11\4\11\0\6\4\2\0\1\53\2\4\1\123"+
    "\5\0\1\4\1\0\1\4\11\0\1\4\1\124\1\4"+
    "\1\125\3\4\1\0\5\4\1\126\12\4\11\0\6\4"+
    "\2\0\1\53\3\4\5\0\1\4\1\0\1\4\11\0"+
    "\7\4\1\0\2\4\1\127\15\4\11\0\6\4\2\0"+
    "\1\53\3\4\5\0\1\4\1\0\1\4\11\0\7\4"+
    "\1\0\2\4\1\130\15\4\76\0\1\17\100\0\1\17"+
    "\1\0\1\131\73\0\2\17\74\0\1\17\2\0\1\17"+
    "\76\0\1\17\10\46\1\0\25\46\1\0\3\46\1\0"+
    "\3\46\1\0\27\46\37\0\1\132\75\0\1\133\3\0"+
    "\1\134\100\0\1\135\41\0\1\136\63\0\7\54\2\0"+
    "\4\54\2\0\1\54\2\0\1\54\1\0\1\54\3\0"+
    "\1\54\5\0\7\54\1\0\20\54\13\0\2\67\1\0"+
    "\1\67\52\0\1\67\1\0\1\67\12\0\3\54\2\137"+
    "\1\54\1\137\2\0\4\54\2\0\1\54\2\0\1\54"+
    "\1\0\1\54\1\140\2\0\1\54\1\0\1\140\3\0"+
    "\7\54\1\0\13\54\1\137\1\54\1\137\2\54\10\0"+
    "\3\54\4\141\2\0\3\54\1\141\2\0\1\54\2\0"+
    "\1\54\1\0\1\141\3\0\1\54\5\0\4\54\1\141"+
    "\2\54\1\0\1\54\1\141\2\54\3\141\1\54\1\141"+
    "\2\54\1\141\1\54\1\141\2\54\11\0\6\4\2\0"+
    "\1\53\3\4\5\0\1\4\1\0\1\4\11\0\7\4"+
    "\1\0\3\4\1\130\14\4\11\0\6\4\2\0\1\53"+
    "\1\142\2\4\5\0\1\4\1\0\1\4\11\0\7\4"+
    "\1\0\20\4\10\0\11\62\1\143\3\62\1\144\64\62"+
    "\1\11\1\62\2\11\1\0\1\11\1\145\3\11\21\62"+
    "\1\11\2\62\1\11\6\62\1\11\7\62\1\11\1\62"+
    "\1\11\12\62\1\0\6\4\2\0\1\53\1\4\1\102"+
    "\1\4\5\0\1\4\1\0\1\4\11\0\7\4\1\0"+
    "\20\4\10\0\3\54\2\67\1\54\1\67\2\0\4\54"+
    "\2\0\1\54\2\0\1\54\1\0\1\56\3\0\1\54"+
    "\5\0\7\54\1\0\13\54\1\67\1\54\1\67\2\54"+
    "\11\0\6\4\2\0\1\53\3\4\5\0\1\4\1\0"+
    "\1\4\11\0\2\4\1\102\4\4\1\0\20\4\11\0"+
    "\6\4\2\0\1\53\3\4\5\0\1\4\1\0\1\4"+
    "\11\0\3\4\1\146\3\4\1\0\20\4\11\0\6\4"+
    "\2\0\1\53\3\4\5\0\1\4\1\0\1\4\11\0"+
    "\7\4\1\0\10\4\1\112\7\4\35\0\1\17\51\0"+
    "\6\4\2\0\1\53\1\146\2\4\5\0\1\4\1\0"+
    "\1\4\11\0\7\4\1\0\20\4\11\0\6\4\2\0"+
    "\1\53\1\4\1\147\1\4\5\0\1\4\1\0\1\4"+
    "\11\0\7\4\1\0\20\4\11\0\6\4\2\0\1\53"+
    "\3\4\5\0\1\4\1\0\1\4\11\0\7\4\1\0"+
    "\4\4\1\150\12\4\1\151\11\0\6\4\2\0\1\53"+
    "\3\4\5\0\1\4\1\0\1\4\11\0\7\4\1\0"+
    "\3\4\1\152\14\4\11\0\6\4\2\0\1\53\3\4"+
    "\5\0\1\4\1\0\1\4\11\0\2\4\1\146\4\4"+
    "\1\0\20\4\11\0\6\4\2\0\1\53\3\4\5\0"+
    "\1\4\1\0\1\4\11\0\5\4\1\153\1\4\1\0"+
    "\20\4\11\0\6\4\2\0\1\53\3\4\5\0\1\4"+
    "\1\0\1\4\11\0\7\4\1\0\7\4\1\112\10\4"+
    "\11\0\6\4\2\0\1\53\3\4\5\0\1\4\1\0"+
    "\1\4\11\0\7\4\1\0\3\4\1\152\10\4\1\154"+
    "\3\4\11\0\6\4\2\0\1\53\3\4\5\0\1\4"+
    "\1\0\1\4\11\0\5\4\1\155\1\4\1\0\20\4"+
    "\11\0\6\4\2\0\1\53\1\4\1\130\1\4\5\0"+
    "\1\4\1\0\1\4\11\0\7\4\1\0\20\4\11\0"+
    "\6\4\2\0\1\53\3\4\5\0\1\4\1\0\1\4"+
    "\11\0\7\4\1\0\2\4\1\14\15\4\11\0\6\4"+
    "\2\0\1\53\1\4\1\112\1\4\5\0\1\4\1\0"+
    "\1\4\11\0\7\4\1\0\20\4\11\0\6\4\2\0"+
    "\1\53\3\4\5\0\1\4\1\0\1\4\11\0\6\4"+
    "\1\71\1\0\20\4\11\0\6\4\2\0\1\53\3\4"+
    "\5\0\1\4\1\0\1\4\11\0\7\4\1\0\14\4"+
    "\1\156\3\4\11\0\6\4\2\0\1\53\3\4\5\0"+
    "\1\4\1\0\1\4\11\0\7\4\1\0\3\4\1\157"+
    "\14\4\11\0\6\4\2\0\1\53\1\4\1\160\1\4"+
    "\5\0\1\4\1\0\1\4\11\0\1\4\1\102\5\4"+
    "\1\0\3\4\1\146\14\4\11\0\6\4\2\0\1\53"+
    "\3\4\5\0\1\4\1\0\1\4\11\0\3\4\1\161"+
    "\3\4\1\0\20\4\11\0\6\4\2\0\1\53\3\4"+
    "\5\0\1\4\1\0\1\162\11\0\7\4\1\0\2\4"+
    "\1\163\15\4\11\0\6\4\2\0\1\53\3\4\5\0"+
    "\1\4\1\0\1\4\11\0\5\4\1\164\1\4\1\0"+
    "\20\4\11\0\6\4\2\0\1\53\3\4\5\0\1\4"+
    "\1\0\1\4\11\0\7\4\1\0\6\4\1\165\11\4"+
    "\11\0\6\4\2\0\1\53\3\4\5\0\1\4\1\0"+
    "\1\4\11\0\3\4\1\152\3\4\1\0\20\4\11\0"+
    "\6\4\2\0\1\53\3\4\5\0\1\4\1\0\1\4"+
    "\11\0\3\4\1\102\3\4\1\0\20\4\11\0\6\4"+
    "\2\0\1\53\3\4\5\0\1\4\1\0\1\4\11\0"+
    "\7\4\1\0\6\4\1\166\11\4\11\0\6\4\2\0"+
    "\1\53\3\4\5\0\1\4\1\0\1\4\11\0\3\4"+
    "\1\167\1\4\1\170\1\4\1\0\20\4\11\0\6\4"+
    "\2\0\1\53\3\4\5\0\1\4\1\0\1\4\11\0"+
    "\7\4\1\0\2\4\1\123\15\4\11\0\6\4\2\0"+
    "\1\53\3\4\5\0\1\4\1\0\1\4\11\0\7\4"+
    "\1\0\11\4\1\146\6\4\11\0\6\4\2\0\1\53"+
    "\3\4\5\0\1\4\1\0\1\4\11\0\1\4\1\102"+
    "\5\4\1\0\20\4\47\0\1\171\3\0\1\171\71\0"+
    "\1\172\76\0\1\173\101\0\1\174\77\0\1\175\32\0"+
    "\4\176\5\0\1\176\7\0\1\176\15\0\1\176\4\0"+
    "\1\176\2\0\3\176\1\0\1\176\2\0\1\176\1\0"+
    "\1\176\12\0\3\54\2\137\1\54\1\137\2\0\4\54"+
    "\2\0\1\54\2\0\1\54\1\0\1\54\3\0\1\54"+
    "\5\0\7\54\1\0\13\54\1\137\1\54\1\137\2\54"+
    "\13\0\2\137\1\0\1\137\52\0\1\137\1\0\1\137"+
    "\13\0\6\4\2\0\1\53\3\4\5\0\1\4\1\0"+
    "\1\4\11\0\7\4\1\0\3\4\1\177\14\4\10\0"+
    "\10\62\1\0\70\62\4\200\2\62\1\143\2\62\1\200"+
    "\1\144\6\62\1\200\15\62\1\200\4\62\1\200\2\62"+
    "\3\200\1\62\1\200\2\62\1\200\1\62\1\200\12\62"+
    "\1\0\6\4\2\0\1\53\3\4\5\0\1\4\1\0"+
    "\1\112\11\0\7\4\1\0\20\4\11\0\6\4\2\0"+
    "\1\53\3\4\5\0\1\4\1\0\1\4\11\0\7\4"+
    "\1\0\7\4\1\201\10\4\11\0\6\4\2\0\1\53"+
    "\3\4\5\0\1\4\1\0\1\202\11\0\7\4\1\0"+
    "\20\4\11\0\6\4\2\0\1\53\3\4\5\0\1\4"+
    "\1\0\1\4\11\0\7\4\1\0\6\4\1\203\11\4"+
    "\11\0\6\4\2\0\1\53\3\4\5\0\1\4\1\0"+
    "\1\4\11\0\1\102\6\4\1\0\20\4\11\0\6\4"+
    "\2\0\1\53\3\4\5\0\1\4\1\0\1\4\11\0"+
    "\7\4\1\0\11\4\1\162\6\4\11\0\6\4\2\0"+
    "\1\53\3\4\5\0\1\4\1\0\1\4\11\0\7\4"+
    "\1\0\3\4\1\204\14\4\11\0\6\4\2\0\1\53"+
    "\3\4\5\0\1\4\1\0\1\4\11\0\1\4\1\205"+
    "\5\4\1\0\20\4\11\0\6\4\2\0\1\53\3\4"+
    "\5\0\1\4\1\0\1\4\11\0\7\4\1\0\15\4"+
    "\1\206\2\4\11\0\6\4\2\0\1\53\3\4\5\0"+
    "\1\4\1\0\1\4\11\0\1\4\1\207\5\4\1\0"+
    "\20\4\11\0\6\4\2\0\1\53\3\4\5\0\1\4"+
    "\1\0\1\4\11\0\7\4\1\0\7\4\1\102\10\4"+
    "\11\0\6\4\2\0\1\53\3\4\5\0\1\4\1\0"+
    "\1\4\11\0\7\4\1\0\5\4\1\210\12\4\11\0"+
    "\6\4\2\0\1\53\3\4\5\0\1\4\1\0\1\4"+
    "\11\0\7\4\1\0\6\4\1\211\11\4\11\0\6\4"+
    "\2\0\1\53\3\4\5\0\1\4\1\0\1\4\11\0"+
    "\3\4\1\123\3\4\1\0\20\4\11\0\6\4\2\0"+
    "\1\53\3\4\5\0\1\4\1\0\1\4\11\0\6\4"+
    "\1\102\1\0\20\4\11\0\6\4\2\0\1\53\3\4"+
    "\5\0\1\4\1\0\1\4\11\0\3\4\1\212\3\4"+
    "\1\0\20\4\11\0\6\4\2\0\1\53\3\4\5\0"+
    "\1\4\1\0\1\4\11\0\7\4\1\0\3\4\1\213"+
    "\14\4\11\0\6\4\2\0\1\53\1\214\2\4\5\0"+
    "\1\4\1\0\1\4\11\0\7\4\1\0\20\4\11\0"+
    "\6\4\2\0\1\53\3\4\5\0\1\4\1\0\1\4"+
    "\11\0\7\4\1\0\3\4\1\102\14\4\41\0\1\17"+
    "\104\0\1\215\102\0\1\216\54\0\1\173\74\0\1\217"+
    "\55\0\4\220\5\0\1\220\7\0\1\220\15\0\1\220"+
    "\4\0\1\220\2\0\3\220\1\0\1\220\2\0\1\220"+
    "\1\0\1\220\13\0\6\4\2\0\1\53\3\4\5\0"+
    "\1\4\1\0\1\4\11\0\7\4\1\0\10\4\1\102"+
    "\7\4\10\0\3\62\4\221\2\62\1\143\2\62\1\221"+
    "\1\144\6\62\1\221\15\62\1\221\4\62\1\221\2\62"+
    "\3\221\1\62\1\221\2\62\1\221\1\62\1\221\12\62"+
    "\1\0\6\4\2\0\1\53\3\4\5\0\1\4\1\0"+
    "\1\4\11\0\5\4\1\222\1\4\1\0\20\4\11\0"+
    "\6\4\2\0\1\53\3\4\5\0\1\4\1\0\1\4"+
    "\11\0\7\4\1\0\14\4\1\223\3\4\11\0\6\4"+
    "\2\0\1\53\3\4\5\0\1\4\1\0\1\4\11\0"+
    "\7\4\1\0\10\4\1\224\7\4\11\0\6\4\2\0"+
    "\1\53\1\160\2\4\5\0\1\4\1\0\1\4\11\0"+
    "\7\4\1\0\20\4\11\0\6\4\2\0\1\53\3\4"+
    "\5\0\1\4\1\0\1\4\11\0\7\4\1\0\5\4"+
    "\1\225\12\4\11\0\3\4\1\102\2\4\2\0\1\53"+
    "\3\4\5\0\1\4\1\0\1\4\11\0\7\4\1\0"+
    "\20\4\11\0\6\4\2\0\1\53\3\4\5\0\1\4"+
    "\1\0\1\4\11\0\5\4\1\226\1\4\1\0\20\4"+
    "\11\0\6\4\2\0\1\53\1\4\1\227\1\4\5\0"+
    "\1\4\1\0\1\4\11\0\7\4\1\0\20\4\11\0"+
    "\6\4\2\0\1\53\3\4\5\0\1\4\1\0\1\4"+
    "\11\0\1\4\1\146\5\4\1\0\20\4\11\0\6\4"+
    "\2\0\1\53\3\4\5\0\1\4\1\0\1\4\11\0"+
    "\3\4\1\112\3\4\1\0\20\4\11\0\6\4\2\0"+
    "\1\53\3\4\5\0\1\4\1\0\1\4\11\0\7\4"+
    "\1\0\13\4\1\102\4\4\11\0\6\4\2\0\1\53"+
    "\3\4\5\0\1\4\1\0\1\4\11\0\7\4\1\0"+
    "\7\4\1\146\10\4\51\0\1\173\3\0\1\216\51\0"+
    "\1\230\55\0\1\217\1\231\4\217\1\231\2\0\3\217"+
    "\2\0\1\231\1\0\2\217\1\231\1\217\1\231\1\0"+
    "\7\231\7\217\1\231\20\217\2\231\1\0\1\231\1\0"+
    "\1\231\5\0\4\232\5\0\1\232\7\0\1\232\15\0"+
    "\1\232\4\0\1\232\2\0\3\232\1\0\1\232\2\0"+
    "\1\232\1\0\1\232\12\0\3\62\4\233\2\62\1\143"+
    "\2\62\1\233\1\144\6\62\1\233\15\62\1\233\4\62"+
    "\1\233\2\62\3\233\1\62\1\233\2\62\1\233\1\62"+
    "\1\233\12\62\1\0\6\4\2\0\1\53\3\4\5\0"+
    "\1\4\1\0\1\4\11\0\7\4\1\0\3\4\1\162"+
    "\14\4\11\0\6\4\2\0\1\53\1\4\1\234\1\4"+
    "\5\0\1\4\1\0\1\4\11\0\7\4\1\0\20\4"+
    "\11\0\6\4\2\0\1\53\3\4\5\0\1\4\1\0"+
    "\1\4\11\0\5\4\1\235\1\4\1\0\20\4\11\0"+
    "\6\4\2\0\1\53\3\4\5\0\1\4\1\0\1\4"+
    "\11\0\1\112\6\4\1\0\20\4\11\0\6\4\2\0"+
    "\1\53\3\4\5\0\1\4\1\0\1\4\11\0\7\4"+
    "\1\0\3\4\1\236\14\4\11\0\6\4\2\0\1\53"+
    "\3\4\5\0\1\4\1\0\1\211\11\0\7\4\1\0"+
    "\20\4\31\0\1\217\57\0\4\4\5\0\1\4\7\0"+
    "\1\4\15\0\1\4\4\0\1\4\2\0\3\4\1\0"+
    "\1\4\2\0\1\4\1\0\1\4\12\0\3\62\4\11"+
    "\2\62\1\143\2\62\1\11\1\144\6\62\1\11\15\62"+
    "\1\11\4\62\1\11\2\62\3\11\1\62\1\11\2\62"+
    "\1\11\1\62\1\11\12\62\1\0\6\4\2\0\1\53"+
    "\3\4\5\0\1\4\1\0\1\237\11\0\7\4\1\0"+
    "\20\4\11\0\6\4\2\0\1\53\3\4\5\0\1\4"+
    "\1\0\1\4\11\0\7\4\1\0\6\4\1\240\11\4"+
    "\11\0\6\4\2\0\1\53\1\241\2\4\5\0\1\4"+
    "\1\0\1\4\11\0\7\4\1\0\20\4\11\0\6\4"+
    "\2\0\1\53\3\4\5\0\1\4\1\0\1\123\11\0"+
    "\7\4\1\0\20\4\11\0\6\4\2\0\1\53\3\4"+
    "\5\0\1\4\1\0\1\4\11\0\7\4\1\0\3\4"+
    "\1\123\14\4\11\0\6\4\2\0\1\53\3\4\5\0"+
    "\1\4\1\0\1\4\11\0\7\4\1\0\2\4\1\242"+
    "\15\4\11\0\6\4\2\0\1\53\1\212\2\4\5\0"+
    "\1\4\1\0\1\4\11\0\7\4\1\0\20\4\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9300];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\1\11\7\1\2\11\26\1\1\11"+
    "\3\1\1\0\1\1\1\0\6\1\2\11\5\1\1\0"+
    "\35\1\6\0\1\1\1\0\3\1\1\11\24\1\6\0"+
    "\16\1\2\0\1\1\1\0\7\1\3\0\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public AcumenTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			/* No multi-line comments */
			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AcumenTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AcumenTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 19: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 20: break;
        case 16: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 21: break;
        case 17: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 22: break;
        case 13: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 23: break;
        case 15: 
          { addToken(Token.RESERVED_WORD);
          }
        case 24: break;
        case 7: 
          { addToken(Token.SEPARATOR);
          }
        case 25: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 26: break;
        case 9: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 27: break;
        case 12: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 28: break;
        case 14: 
          { addToken(Token.FUNCTION);
          }
        case 29: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 30: break;
        case 11: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 31: break;
        case 18: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 32: break;
        case 10: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 33: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 34: break;
        case 6: 
          { addToken(Token.OPERATOR);
          }
        case 35: break;
        case 8: 
          { 
          }
        case 36: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 163: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 164: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
