/* The following code was generated by JFlex 1.4.1 on 10/14/14 4:30 PM */

/*
 * Generated on 10/14/14 4:30 PM
 */
package acumen.ui.tl;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class AcumenTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\10\1\0\1\20\1\16\22\0\1\20\1\36\1\15"+
    "\1\17\1\1\1\44\1\75\1\7\2\42\1\22\1\41\1\36\1\26"+
    "\1\24\1\21\1\4\1\72\1\67\1\6\4\6\2\3\1\50\1\36"+
    "\1\101\1\100\1\76\1\36\1\37\1\5\1\62\1\55\1\57\2\5"+
    "\10\1\1\63\2\1\1\74\1\65\1\66\6\1\1\102\1\11\1\40"+
    "\1\77\1\2\1\0\1\32\1\14\1\52\1\53\1\25\1\31\1\71"+
    "\1\45\1\47\1\64\1\70\1\33\1\54\1\13\1\56\1\46\1\73"+
    "\1\30\1\34\1\27\1\12\1\61\1\51\1\23\1\60\1\1\1\35"+
    "\1\103\1\35\1\43\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\1\3\2\1\1\4\1\1\1\5"+
    "\2\6\3\1\1\6\6\1\1\7\1\6\4\1\1\6"+
    "\14\1\5\6\1\10\1\11\5\10\1\12\3\10\1\0"+
    "\1\13\1\0\2\13\2\1\2\4\1\14\2\0\1\15"+
    "\1\16\1\1\1\17\30\1\1\0\2\1\1\20\2\21"+
    "\24\1\1\0\1\22\11\0\1\17\1\0\1\23\4\1"+
    "\1\4\1\24\1\4\2\0\2\1\1\20\3\1\1\21"+
    "\3\1\1\20\22\1\1\25\3\1\12\0\1\1\1\4"+
    "\2\0\1\21\4\1\1\20\16\1\2\0\1\26\2\0"+
    "\1\27\1\0\1\4\2\0\14\1\5\0\1\4\2\0"+
    "\7\1\2\0\6\1\1\0\1\21\3\1\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\314"+
    "\0\u01dc\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\314\0\u0374"+
    "\0\u03b8\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594"+
    "\0\u05d8\0\314\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0660"+
    "\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c"+
    "\0\u0990\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c"+
    "\0\u0bb0\0\u0bf4\0\314\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48"+
    "\0\314\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24"+
    "\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\314\0\u10bc\0\u1100"+
    "\0\314\0\314\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298"+
    "\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8"+
    "\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8"+
    "\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u0110"+
    "\0\u18f8\0\u0110\0\u193c\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90"+
    "\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0"+
    "\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\314"+
    "\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac"+
    "\0\u20f0\0\u2134\0\u2178\0\u0f68\0\u21bc\0\u2200\0\u2244\0\u2288"+
    "\0\u22cc\0\314\0\u2310\0\u2354\0\u2398\0\u23dc\0\u2420\0\u2464"+
    "\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684"+
    "\0\u26c8\0\u270c\0\u2750\0\u2794\0\u27d8\0\u281c\0\u2860\0\u28a4"+
    "\0\u28e8\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4"+
    "\0\u2b08\0\u2b4c\0\u0110\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0"+
    "\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0"+
    "\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u30e0"+
    "\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u3300"+
    "\0\u3344\0\u3388\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc\0\u3520"+
    "\0\u3564\0\u35a8\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u36fc\0\u3740"+
    "\0\u3784\0\u37c8\0\u380c\0\u3850\0\u3894\0\u38d8\0\u391c\0\u3960"+
    "\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c\0\u35ec"+
    "\0\u3b80\0\u36b8\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\u3d18"+
    "\0\u3d5c\0\u3da0\0\u3de4\0\u3e28\0\u3e6c\0\u3eb0\0\u3ef4\0\u3f38"+
    "\0\u3f7c\0\u3fc0\0\u4004\0\u4048\0\u408c\0\u40d0\0\314\0\u4114"+
    "\0\u4158\0\u419c\0\u41e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\5\1\6\1\4\1\10"+
    "\1\4\1\5\1\11\1\12\1\13\1\4\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\4\1\17\1\32"+
    "\1\33\1\32\1\34\1\17\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\5\1\46\1\47"+
    "\1\5\1\50\1\51\1\5\1\52\1\53\1\6\1\5"+
    "\1\54\1\6\2\5\1\55\1\56\1\17\1\57\1\60"+
    "\1\32\1\61\10\62\1\63\11\62\1\64\6\62\1\65"+
    "\13\62\1\66\3\62\1\67\32\62\10\70\1\71\20\70"+
    "\1\72\13\70\1\73\3\70\1\74\32\70\105\0\6\5"+
    "\2\0\1\75\3\5\6\0\1\5\1\0\1\5\1\0"+
    "\6\5\10\0\3\5\1\0\24\5\7\0\3\76\2\6"+
    "\1\76\1\6\2\0\4\76\2\0\1\76\3\0\1\76"+
    "\1\77\1\100\1\0\6\76\2\0\1\76\5\0\3\76"+
    "\1\0\16\76\1\6\2\76\1\6\2\76\7\0\3\76"+
    "\2\6\1\76\1\6\2\0\4\76\2\0\1\76\3\0"+
    "\1\101\1\77\1\100\1\0\6\76\2\0\1\76\5\0"+
    "\3\76\1\0\16\76\1\6\2\76\1\6\2\76\10\0"+
    "\6\5\2\0\1\75\3\5\6\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\3\5\1\0\5\5\1\102\16\5"+
    "\10\0\6\5\2\0\1\75\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\103\1\5\10\0\3\5\1\0"+
    "\24\5\7\0\10\13\1\104\1\105\3\13\1\106\66\13"+
    "\34\0\1\107\12\0\1\110\54\0\1\15\104\0\1\111"+
    "\1\112\62\0\6\5\2\0\1\75\3\5\6\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\3\5\1\0\5\5"+
    "\1\113\16\5\12\0\2\114\1\0\1\114\12\0\2\17"+
    "\1\0\1\17\1\0\1\17\12\0\1\17\25\0\1\114"+
    "\2\0\1\114\4\0\1\17\5\0\6\5\2\0\1\75"+
    "\1\5\1\115\1\5\6\0\1\116\1\0\1\5\1\0"+
    "\4\5\1\117\1\5\10\0\3\5\1\0\24\5\105\0"+
    "\1\17\6\0\6\5\2\0\1\75\3\5\6\0\1\5"+
    "\1\0\1\120\1\0\1\5\1\121\1\5\1\122\2\5"+
    "\10\0\3\5\1\0\5\5\1\123\1\5\1\124\14\5"+
    "\10\0\6\5\2\0\1\75\3\5\6\0\1\5\1\0"+
    "\1\125\1\0\6\5\10\0\2\5\1\126\1\0\5\5"+
    "\1\127\16\5\10\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\3\5\1\130\1\131\1\5"+
    "\10\0\3\5\1\0\5\5\1\132\16\5\10\0\6\5"+
    "\2\0\1\75\2\5\1\133\6\0\1\5\1\0\1\5"+
    "\1\0\1\134\3\5\1\135\1\136\10\0\3\5\1\0"+
    "\1\5\1\137\22\5\10\0\6\5\2\0\1\75\3\5"+
    "\6\0\1\5\1\0\1\5\1\0\6\5\10\0\3\5"+
    "\1\0\5\5\1\140\16\5\10\0\6\5\2\0\1\75"+
    "\1\141\2\5\6\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\2\5\1\142\1\0\1\143\21\5\1\144\1\5"+
    "\30\0\1\145\162\0\1\17\4\0\6\5\2\0\1\75"+
    "\3\5\6\0\1\5\1\0\1\5\1\0\6\5\10\0"+
    "\3\5\1\0\7\5\1\146\14\5\10\0\6\5\2\0"+
    "\1\75\3\5\6\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\147\4\5\10\0\2\5\1\150\1\0\24\5\10\0"+
    "\6\5\2\0\1\75\1\5\1\151\1\5\6\0\1\5"+
    "\1\0\1\5\1\0\2\5\1\152\3\5\10\0\3\5"+
    "\1\0\24\5\10\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\6\5\10\0\1\153\1\5"+
    "\1\154\1\0\24\5\10\0\6\5\2\0\1\75\2\5"+
    "\1\144\6\0\1\5\1\0\1\155\1\0\1\5\1\156"+
    "\1\5\1\157\1\160\1\5\10\0\3\5\1\0\5\5"+
    "\1\161\1\5\1\162\14\5\10\0\6\5\2\0\1\75"+
    "\3\5\6\0\1\5\1\0\1\5\1\0\6\5\10\0"+
    "\3\5\1\0\5\5\1\163\16\5\10\0\6\5\2\0"+
    "\1\75\3\5\6\0\1\5\1\0\1\5\1\0\3\5"+
    "\1\164\2\5\10\0\3\5\1\0\5\5\1\165\16\5"+
    "\10\0\6\5\2\0\1\75\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\3\5\1\0\5\5\1\166"+
    "\1\5\1\167\14\5\10\0\6\5\2\0\1\75\3\5"+
    "\6\0\1\5\1\0\1\5\1\0\6\5\10\0\2\5"+
    "\1\170\1\0\24\5\10\0\6\5\2\0\1\75\3\5"+
    "\6\0\1\5\1\0\1\171\1\0\6\5\10\0\3\5"+
    "\1\0\24\5\10\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\6\5\10\0\3\5\1\0"+
    "\5\5\1\172\16\5\10\0\6\5\2\0\1\75\2\5"+
    "\1\173\6\0\1\5\1\0\1\5\1\0\6\5\10\0"+
    "\3\5\1\0\24\5\10\0\6\5\2\0\1\75\3\5"+
    "\6\0\1\5\1\0\1\5\1\0\6\5\10\0\1\5"+
    "\1\174\1\5\1\0\24\5\10\0\6\5\2\0\1\75"+
    "\3\5\6\0\1\5\1\0\1\175\1\0\6\5\10\0"+
    "\3\5\1\0\24\5\10\0\6\5\2\0\1\75\3\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\5\1\176\4\5"+
    "\10\0\3\5\1\0\24\5\104\0\1\17\104\0\1\17"+
    "\1\0\1\17\103\0\1\17\1\0\1\177\101\0\2\17"+
    "\105\0\1\17\10\62\1\0\11\62\1\0\6\62\1\0"+
    "\13\62\1\0\3\62\1\0\32\62\21\0\1\200\111\0"+
    "\1\201\17\0\1\202\63\0\1\203\125\0\1\204\32\0"+
    "\10\70\1\0\20\70\1\0\13\70\1\0\3\70\1\0"+
    "\32\70\27\0\1\205\17\0\1\206\63\0\1\207\125\0"+
    "\1\210\44\0\1\211\71\0\7\76\2\0\4\76\2\0"+
    "\1\76\3\0\1\76\1\0\1\76\1\0\6\76\2\0"+
    "\1\76\5\0\3\76\1\0\24\76\12\0\2\114\1\0"+
    "\1\114\60\0\1\114\2\0\1\114\11\0\3\76\2\212"+
    "\1\76\1\212\2\0\4\76\2\0\1\76\3\0\1\76"+
    "\1\0\1\76\1\213\6\76\2\0\1\76\1\0\1\213"+
    "\3\0\3\76\1\0\16\76\1\212\2\76\1\212\2\76"+
    "\7\0\3\76\4\214\2\0\3\76\1\214\2\0\1\76"+
    "\3\0\1\76\1\0\1\214\1\0\2\76\2\214\2\76"+
    "\2\0\1\76\5\0\3\76\1\0\1\76\2\214\1\76"+
    "\1\214\1\76\1\214\2\76\1\214\4\76\1\214\2\76"+
    "\1\214\2\76\10\0\6\5\2\0\1\75\1\5\1\215"+
    "\1\5\6\0\1\5\1\0\1\130\1\0\1\150\1\216"+
    "\4\5\10\0\3\5\1\0\24\5\10\0\6\5\2\0"+
    "\1\75\1\217\2\5\6\0\1\5\1\0\1\5\1\0"+
    "\3\5\1\220\2\5\10\0\3\5\1\0\24\5\7\0"+
    "\11\104\1\221\3\104\1\222\72\104\1\13\1\104\2\13"+
    "\1\0\1\13\1\223\3\13\11\104\3\13\35\104\1\13"+
    "\2\104\1\13\11\104\25\0\1\224\71\0\1\225\71\0"+
    "\6\5\2\0\1\75\3\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\150\4\5\10\0\3\5\1\0\24\5"+
    "\7\0\3\76\2\114\1\76\1\114\2\0\4\76\2\0"+
    "\1\76\3\0\1\76\1\0\1\100\1\0\6\76\2\0"+
    "\1\76\5\0\3\76\1\0\16\76\1\114\2\76\1\114"+
    "\2\76\10\0\6\5\2\0\1\75\3\5\6\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\3\5\1\0\2\5"+
    "\1\152\21\5\10\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\6\5\10\0\1\5\1\150"+
    "\1\5\1\0\24\5\10\0\6\5\2\0\1\75\3\5"+
    "\6\0\1\5\1\0\1\5\1\0\5\5\1\226\10\0"+
    "\3\5\1\0\24\5\10\0\6\5\2\0\1\75\3\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\5\1\227\4\5"+
    "\10\0\3\5\1\0\24\5\10\0\6\5\2\0\1\75"+
    "\1\215\2\5\6\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\3\5\1\0\24\5\10\0\6\5\2\0\1\75"+
    "\1\5\1\230\1\5\6\0\1\5\1\0\1\5\1\0"+
    "\6\5\10\0\3\5\1\0\24\5\10\0\6\5\2\0"+
    "\1\75\3\5\6\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\3\5\1\0\6\5\1\231\14\5\1\232\10\0"+
    "\6\5\2\0\1\75\3\5\6\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\1\5\1\215\1\5\1\0\24\5"+
    "\10\0\6\5\2\0\1\75\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\3\5\1\0\2\5\1\150"+
    "\21\5\10\0\6\5\2\0\1\75\1\5\1\163\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\6\5\10\0\3\5"+
    "\1\0\24\5\10\0\6\5\2\0\1\75\1\233\2\5"+
    "\6\0\1\5\1\0\1\5\1\0\6\5\10\0\3\5"+
    "\1\0\24\5\10\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\157\1\5\10\0"+
    "\3\5\1\0\24\5\10\0\6\5\2\0\1\75\3\5"+
    "\6\0\1\5\1\0\1\5\1\0\6\5\10\0\3\5"+
    "\1\0\5\5\1\20\16\5\10\0\6\5\2\0\1\75"+
    "\3\5\6\0\1\5\1\0\1\5\1\0\1\5\1\234"+
    "\4\5\10\0\3\5\1\0\24\5\10\0\6\5\2\0"+
    "\1\75\3\5\6\0\1\5\1\0\1\5\1\0\5\5"+
    "\1\150\10\0\3\5\1\0\24\5\10\0\6\5\2\0"+
    "\1\75\3\5\6\0\1\5\1\0\1\5\1\0\3\5"+
    "\1\235\2\5\10\0\3\5\1\0\24\5\10\0\6\5"+
    "\2\0\1\75\3\5\6\0\1\5\1\0\1\5\1\0"+
    "\6\5\10\0\3\5\1\0\1\236\23\5\10\0\6\5"+
    "\2\0\1\75\3\5\6\0\1\5\1\0\1\5\1\0"+
    "\6\5\10\0\2\5\1\237\1\0\24\5\10\0\6\5"+
    "\2\0\1\75\3\5\6\0\1\5\1\0\1\5\1\0"+
    "\6\5\10\0\3\5\1\0\5\5\1\133\16\5\10\0"+
    "\6\5\2\0\1\75\3\5\6\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\3\5\1\0\20\5\1\240\3\5"+
    "\10\0\6\5\2\0\1\75\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\3\5\1\0\3\5\1\152"+
    "\20\5\10\0\6\5\2\0\1\75\1\5\1\230\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\6\5\10\0\3\5"+
    "\1\0\20\5\1\241\3\5\10\0\6\5\2\0\1\75"+
    "\3\5\6\0\1\5\1\0\1\5\1\0\6\5\10\0"+
    "\2\5\1\242\1\0\24\5\10\0\6\5\2\0\1\75"+
    "\3\5\6\0\1\5\1\0\1\5\1\0\1\5\1\163"+
    "\4\5\10\0\3\5\1\0\24\5\35\0\1\17\56\0"+
    "\6\5\2\0\1\75\3\5\6\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\1\5\1\243\1\5\1\0\24\5"+
    "\10\0\6\5\2\0\1\75\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\2\5\1\244\1\0\24\5"+
    "\10\0\6\5\2\0\1\75\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\2\5\1\245\1\0\24\5"+
    "\10\0\6\5\2\0\1\75\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\2\5\1\246\1\0\24\5"+
    "\10\0\6\5\2\0\1\75\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\247\5\5\10\0\3\5\1\0\24\5"+
    "\10\0\6\5\2\0\1\75\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\2\5\1\250\1\0\24\5"+
    "\10\0\6\5\2\0\1\75\3\5\6\0\1\5\1\0"+
    "\1\251\1\0\6\5\10\0\3\5\1\0\5\5\1\252"+
    "\16\5\10\0\6\5\2\0\1\75\3\5\6\0\1\5"+
    "\1\0\1\5\1\0\5\5\1\215\10\0\3\5\1\0"+
    "\24\5\10\0\6\5\2\0\1\75\3\5\6\0\1\5"+
    "\1\0\1\5\1\0\3\5\1\253\2\5\10\0\3\5"+
    "\1\0\24\5\10\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\5\5\1\230\10\0\3\5"+
    "\1\0\24\5\10\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\3\5\1\237\2\5\10\0"+
    "\3\5\1\0\24\5\10\0\6\5\2\0\1\75\3\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\150\5\5\10\0"+
    "\3\5\1\0\24\5\10\0\6\5\2\0\1\75\3\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\254\5\5\10\0"+
    "\3\5\1\0\20\5\1\255\3\5\10\0\6\5\2\0"+
    "\1\75\3\5\6\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\3\5\1\0\2\5\1\256\5\5\1\215\13\5"+
    "\10\0\6\5\2\0\1\75\1\5\1\257\1\5\6\0"+
    "\1\5\1\0\1\5\1\0\6\5\10\0\3\5\1\0"+
    "\24\5\10\0\6\5\2\0\1\75\3\5\6\0\1\5"+
    "\1\0\1\5\1\0\4\5\1\260\1\5\10\0\3\5"+
    "\1\0\24\5\10\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\5\5\1\261\10\0\3\5"+
    "\1\0\24\5\10\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\262\1\5\10\0"+
    "\3\5\1\0\24\5\10\0\6\5\2\0\1\75\3\5"+
    "\6\0\1\263\1\0\1\5\1\0\6\5\10\0\3\5"+
    "\1\0\24\5\10\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\6\5\10\0\3\5\1\0"+
    "\13\5\1\263\10\5\10\0\6\5\2\0\1\75\3\5"+
    "\6\0\1\5\1\0\1\5\1\0\6\5\10\0\1\264"+
    "\2\5\1\0\24\5\10\0\6\5\2\0\1\75\3\5"+
    "\6\0\1\265\1\0\1\5\1\0\6\5\10\0\3\5"+
    "\1\0\24\5\10\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\266\1\0\6\5\10\0\3\5\1\0"+
    "\24\5\36\0\1\267\17\0\1\267\102\0\1\270\70\0"+
    "\1\271\77\0\1\272\125\0\1\273\100\0\1\274\70\0"+
    "\1\275\77\0\1\276\125\0\1\277\35\0\4\300\5\0"+
    "\1\300\10\0\1\300\3\0\2\300\17\0\2\300\1\0"+
    "\1\300\1\0\1\300\2\0\1\300\4\0\1\300\2\0"+
    "\1\300\11\0\3\76\2\212\1\76\1\212\2\0\4\76"+
    "\2\0\1\76\3\0\1\76\1\0\1\76\1\0\6\76"+
    "\2\0\1\76\5\0\3\76\1\0\16\76\1\212\2\76"+
    "\1\212\2\76\12\0\2\212\1\0\1\212\60\0\1\212"+
    "\2\0\1\212\12\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\152\1\0\6\5\10\0\3\5\1\0"+
    "\24\5\10\0\6\5\2\0\1\75\3\5\6\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\3\5\1\0\3\5"+
    "\1\150\20\5\10\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\150\1\0\6\5\10\0\3\5\1\0"+
    "\24\5\10\0\6\5\2\0\1\75\3\5\6\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\3\5\1\0\1\5"+
    "\1\301\22\5\7\0\10\104\1\0\76\104\4\302\2\104"+
    "\1\221\2\104\1\302\1\222\7\104\1\302\3\104\2\302"+
    "\17\104\2\302\1\104\1\302\1\104\1\302\2\104\1\302"+
    "\4\104\1\302\2\104\1\302\11\104\54\0\1\303\101\0"+
    "\1\304\32\0\6\5\2\0\1\75\3\5\6\0\1\5"+
    "\1\0\1\305\1\0\6\5\10\0\3\5\1\0\24\5"+
    "\10\0\6\5\2\0\1\75\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\3\5\1\0\3\5\1\306"+
    "\20\5\10\0\6\5\2\0\1\75\3\5\6\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\1\150\2\5\1\0"+
    "\24\5\10\0\6\5\2\0\1\75\3\5\6\0\1\5"+
    "\1\0\1\307\1\0\6\5\10\0\3\5\1\0\24\5"+
    "\10\0\6\5\2\0\1\75\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\3\5\1\310\2\5\10\0\3\5\1\0"+
    "\24\5\10\0\6\5\2\0\1\75\1\5\1\125\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\6\5\10\0\3\5"+
    "\1\0\24\5\10\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\311\1\0\6\5\10\0\3\5\1\0"+
    "\24\5\10\0\6\5\2\0\1\75\1\5\1\312\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\6\5\10\0\3\5"+
    "\1\0\24\5\10\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\3\5\1\313\2\5\10\0"+
    "\3\5\1\0\24\5\10\0\6\5\2\0\1\75\1\5"+
    "\1\150\1\5\6\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\3\5\1\0\24\5\10\0\6\5\2\0\1\75"+
    "\3\5\6\0\1\5\1\0\1\5\1\0\6\5\10\0"+
    "\3\5\1\0\21\5\1\314\2\5\10\0\6\5\2\0"+
    "\1\75\1\5\1\315\1\5\6\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\3\5\1\0\24\5\10\0\6\5"+
    "\2\0\1\75\3\5\6\0\1\5\1\0\1\5\1\0"+
    "\1\254\5\5\10\0\3\5\1\0\24\5\10\0\6\5"+
    "\2\0\1\75\3\5\6\0\1\5\1\0\1\5\1\0"+
    "\6\5\10\0\3\5\1\0\5\5\1\316\16\5\10\0"+
    "\6\5\2\0\1\75\3\5\6\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\3\5\1\0\10\5\1\251\13\5"+
    "\10\0\6\5\2\0\1\75\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\317\5\5\10\0\3\5\1\0\24\5"+
    "\10\0\6\5\2\0\1\75\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\217\5\5\10\0\3\5\1\0\24\5"+
    "\10\0\6\5\2\0\1\75\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\1\152\2\5\1\0\24\5"+
    "\10\0\6\5\2\0\1\75\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\150\1\5\10\0\3\5\1\0"+
    "\24\5\10\0\6\5\2\0\1\75\3\5\6\0\1\5"+
    "\1\0\1\5\1\0\3\5\1\320\2\5\10\0\3\5"+
    "\1\0\24\5\10\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\5\5\1\133\10\0\3\5"+
    "\1\0\24\5\10\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\5\5\1\321\10\0\2\5"+
    "\1\141\1\0\24\5\10\0\6\5\2\0\1\75\3\5"+
    "\6\0\1\5\1\0\1\5\1\0\6\5\10\0\3\5"+
    "\1\0\1\5\1\247\22\5\10\0\6\5\2\0\1\75"+
    "\3\5\6\0\1\5\1\0\1\322\1\0\6\5\10\0"+
    "\3\5\1\0\24\5\10\0\6\5\2\0\1\75\3\5"+
    "\6\0\1\5\1\0\1\323\1\0\6\5\10\0\3\5"+
    "\1\0\24\5\10\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\263\1\0\1\324\5\5\10\0\3\5"+
    "\1\0\24\5\10\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\6\5\10\0\2\5\1\325"+
    "\1\0\24\5\10\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\6\5\10\0\3\5\1\0"+
    "\1\5\1\326\22\5\10\0\6\5\2\0\1\75\3\5"+
    "\6\0\1\5\1\0\1\5\1\0\4\5\1\327\1\5"+
    "\10\0\3\5\1\0\24\5\10\0\6\5\2\0\1\75"+
    "\3\5\6\0\1\5\1\0\1\330\1\0\6\5\10\0"+
    "\3\5\1\0\24\5\10\0\6\5\2\0\1\75\3\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\263\5\5\10\0"+
    "\3\5\1\0\24\5\10\0\6\5\2\0\1\75\3\5"+
    "\6\0\1\5\1\0\1\237\1\0\6\5\10\0\3\5"+
    "\1\0\24\5\47\0\1\17\113\0\1\331\60\0\1\270"+
    "\124\0\1\332\61\0\1\333\127\0\1\334\60\0\1\274"+
    "\124\0\1\335\61\0\1\336\62\0\4\337\5\0\1\337"+
    "\10\0\1\337\3\0\2\337\17\0\2\337\1\0\1\337"+
    "\1\0\1\337\2\0\1\337\4\0\1\337\2\0\1\337"+
    "\12\0\6\5\2\0\1\75\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\3\5\1\0\17\5\1\150"+
    "\4\5\7\0\3\104\4\340\2\104\1\221\2\104\1\340"+
    "\1\222\7\104\1\340\3\104\2\340\17\104\2\340\1\104"+
    "\1\340\1\104\1\340\2\104\1\340\4\104\1\340\2\104"+
    "\1\340\11\104\32\0\1\341\104\0\1\342\51\0\6\5"+
    "\2\0\1\75\3\5\6\0\1\5\1\0\1\5\1\0"+
    "\6\5\10\0\2\5\1\343\1\0\24\5\10\0\6\5"+
    "\2\0\1\75\3\5\6\0\1\5\1\0\1\5\1\0"+
    "\6\5\10\0\2\5\1\344\1\0\24\5\10\0\6\5"+
    "\2\0\1\75\3\5\6\0\1\5\1\0\1\5\1\0"+
    "\6\5\10\0\3\5\1\0\20\5\1\345\3\5\10\0"+
    "\6\5\2\0\1\75\3\5\6\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\3\5\1\0\2\5\1\346\21\5"+
    "\10\0\6\5\2\0\1\75\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\3\5\1\254\2\5\10\0\3\5\1\0"+
    "\24\5\10\0\6\5\2\0\1\75\3\5\6\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\3\5\1\0\16\5"+
    "\1\150\5\5\10\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\6\5\10\0\3\5\1\0"+
    "\7\5\1\321\14\5\10\0\3\5\1\150\2\5\2\0"+
    "\1\75\3\5\6\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\3\5\1\0\24\5\10\0\6\5\2\0\1\75"+
    "\1\216\2\5\6\0\1\5\1\0\1\5\1\0\6\5"+
    "\10\0\3\5\1\0\24\5\10\0\6\5\2\0\1\75"+
    "\3\5\6\0\1\5\1\0\1\5\1\0\1\347\5\5"+
    "\10\0\3\5\1\0\24\5\10\0\6\5\2\0\1\75"+
    "\3\5\6\0\1\5\1\0\1\5\1\0\6\5\10\0"+
    "\2\5\1\350\1\0\24\5\10\0\6\5\2\0\1\75"+
    "\3\5\6\0\1\5\1\0\1\5\1\0\1\215\5\5"+
    "\10\0\3\5\1\0\24\5\10\0\6\5\2\0\1\75"+
    "\3\5\6\0\1\5\1\0\1\5\1\0\5\5\1\152"+
    "\10\0\3\5\1\0\24\5\10\0\6\5\2\0\1\75"+
    "\1\5\1\351\1\5\6\0\1\5\1\0\1\5\1\0"+
    "\6\5\10\0\3\5\1\0\24\5\10\0\6\5\2\0"+
    "\1\75\3\5\6\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\152\1\5\10\0\3\5\1\0\24\5\10\0\6\5"+
    "\2\0\1\75\3\5\6\0\1\5\1\0\1\5\1\0"+
    "\6\5\10\0\2\5\1\352\1\0\24\5\10\0\6\5"+
    "\2\0\1\75\1\5\1\353\1\5\6\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\3\5\1\0\24\5\10\0"+
    "\6\5\2\0\1\75\3\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\354\4\5\10\0\3\5\1\0\24\5"+
    "\10\0\6\5\2\0\1\75\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\3\5\1\0\5\5\1\355"+
    "\16\5\10\0\6\5\2\0\1\75\3\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\356\4\5\10\0\3\5"+
    "\1\0\24\5\30\0\1\357\116\0\1\270\13\0\1\331"+
    "\34\0\1\333\1\360\4\333\1\360\2\0\3\333\2\0"+
    "\1\360\1\0\1\333\1\360\1\333\1\360\1\333\1\360"+
    "\6\333\1\0\7\360\3\333\1\360\24\333\1\360\2\0"+
    "\1\360\1\0\1\360\22\0\1\361\116\0\1\274\13\0"+
    "\1\334\34\0\1\336\1\362\4\336\1\362\2\0\3\336"+
    "\2\0\1\362\1\0\1\336\1\362\1\336\1\362\1\336"+
    "\1\362\6\336\1\0\7\362\3\336\1\362\24\336\1\362"+
    "\2\0\1\362\1\0\1\362\4\0\4\363\5\0\1\363"+
    "\10\0\1\363\3\0\2\363\17\0\2\363\1\0\1\363"+
    "\1\0\1\363\2\0\1\363\4\0\1\363\2\0\1\363"+
    "\11\0\3\104\4\364\2\104\1\221\2\104\1\364\1\222"+
    "\7\104\1\364\3\104\2\364\17\104\2\364\1\104\1\364"+
    "\1\104\1\364\2\104\1\364\4\104\1\364\2\104\1\364"+
    "\11\104\13\0\1\365\102\0\1\366\72\0\6\5\2\0"+
    "\1\75\3\5\6\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\152\3\5\10\0\3\5\1\0\24\5\10\0\6\5"+
    "\2\0\1\75\1\5\1\251\1\5\6\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\3\5\1\0\24\5\10\0"+
    "\6\5\2\0\1\75\3\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\367\4\5\10\0\3\5\1\0\24\5"+
    "\10\0\6\5\2\0\1\75\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\2\5\1\370\1\0\24\5"+
    "\10\0\6\5\2\0\1\75\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\1\371\2\5\1\0\24\5"+
    "\10\0\6\5\2\0\1\75\3\5\6\0\1\5\1\0"+
    "\1\5\1\0\3\5\1\372\2\5\10\0\3\5\1\0"+
    "\24\5\10\0\6\5\2\0\1\75\3\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\373\5\5\10\0\3\5\1\0"+
    "\24\5\10\0\6\5\2\0\1\75\1\5\1\374\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\6\5\10\0\3\5"+
    "\1\0\24\5\10\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\6\5\10\0\3\5\1\0"+
    "\2\5\1\375\21\5\10\0\6\5\2\0\1\75\3\5"+
    "\6\0\1\5\1\0\1\320\1\0\6\5\10\0\3\5"+
    "\1\0\24\5\10\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\6\5\10\0\3\5\1\0"+
    "\1\150\23\5\10\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\263\1\0\6\5\10\0\3\5\1\0"+
    "\24\5\30\0\1\333\103\0\1\336\65\0\4\5\5\0"+
    "\1\5\10\0\1\5\3\0\2\5\17\0\2\5\1\0"+
    "\1\5\1\0\1\5\2\0\1\5\4\0\1\5\2\0"+
    "\1\5\11\0\3\104\4\13\2\104\1\221\2\104\1\13"+
    "\1\222\7\104\1\13\3\104\2\13\17\104\2\13\1\104"+
    "\1\13\1\104\1\13\2\104\1\13\4\104\1\13\2\104"+
    "\1\13\11\104\27\0\1\376\127\0\1\377\31\0\6\5"+
    "\2\0\1\75\3\5\6\0\1\5\1\0\1\u0100\1\0"+
    "\6\5\10\0\3\5\1\0\24\5\10\0\6\5\2\0"+
    "\1\75\3\5\6\0\1\5\1\0\1\5\1\0\3\5"+
    "\1\u0101\2\5\10\0\3\5\1\0\24\5\10\0\6\5"+
    "\2\0\1\75\3\5\6\0\1\5\1\0\1\u0102\1\0"+
    "\6\5\10\0\3\5\1\0\24\5\10\0\6\5\2\0"+
    "\1\75\3\5\6\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\u0103\1\5\10\0\3\5\1\0\24\5\10\0\6\5"+
    "\2\0\1\75\3\5\6\0\1\5\1\0\1\5\1\0"+
    "\3\5\1\150\2\5\10\0\3\5\1\0\24\5\10\0"+
    "\6\5\2\0\1\75\1\u0104\2\5\6\0\1\5\1\0"+
    "\1\5\1\0\6\5\10\0\3\5\1\0\24\5\10\0"+
    "\6\5\2\0\1\75\3\5\6\0\1\5\1\0\1\u0105"+
    "\1\0\6\5\10\0\3\5\1\0\24\5\56\0\1\u0106"+
    "\61\0\1\u0107\57\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\133\1\0\6\5\10\0\3\5\1\0"+
    "\24\5\10\0\6\5\2\0\1\75\1\5\1\133\1\5"+
    "\6\0\1\5\1\0\1\5\1\0\6\5\10\0\3\5"+
    "\1\0\24\5\10\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\5\5\1\u0108\10\0\3\5"+
    "\1\0\24\5\10\0\6\5\2\0\1\75\3\5\6\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\u0109\1\5\10\0"+
    "\3\5\1\0\24\5\10\0\6\5\2\0\1\75\3\5"+
    "\6\0\1\5\1\0\1\5\1\0\6\5\10\0\3\5"+
    "\1\0\5\5\1\u010a\16\5\10\0\6\5\2\0\1\75"+
    "\3\5\6\0\1\5\1\0\1\5\1\0\1\5\1\263"+
    "\4\5\10\0\3\5\1\0\24\5\61\0\1\u010b\32\0"+
    "\6\5\2\0\1\75\3\5\6\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\2\5\1\321\1\0\24\5\10\0"+
    "\6\5\2\0\1\75\3\5\6\0\1\5\1\0\1\5"+
    "\1\0\6\5\10\0\3\5\1\0\7\5\1\152\14\5"+
    "\10\0\6\5\2\0\1\75\1\321\2\5\6\0\1\5"+
    "\1\0\1\5\1\0\6\5\10\0\3\5\1\0\24\5"+
    "\43\0\1\u0107\47\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16932];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\1\11\6\1\1\11\12\1\1\11"+
    "\30\1\1\11\5\1\1\11\3\1\1\0\1\1\1\0"+
    "\6\1\1\11\2\0\2\11\32\1\1\0\31\1\1\0"+
    "\1\11\11\0\1\1\1\0\6\1\1\11\1\1\2\0"+
    "\41\1\12\0\2\1\2\0\24\1\2\0\1\1\2\0"+
    "\1\1\1\0\1\1\2\0\14\1\5\0\1\1\2\0"+
    "\7\1\2\0\6\1\1\0\1\11\3\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public AcumenTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AcumenTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AcumenTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 24: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 25: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 26: break;
        case 19: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 27: break;
        case 20: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 28: break;
        case 15: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 29: break;
        case 17: 
          { addToken(Token.RESERVED_WORD);
          }
        case 30: break;
        case 7: 
          { addToken(Token.SEPARATOR);
          }
        case 31: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 32: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 33: break;
        case 13: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 34: break;
        case 16: 
          { addToken(Token.FUNCTION);
          }
        case 35: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 36: break;
        case 21: 
          { addToken(Token.DATA_TYPE);
          }
        case 37: break;
        case 18: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 38: break;
        case 12: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 39: break;
        case 23: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 40: break;
        case 22: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 41: break;
        case 11: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 42: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 43: break;
        case 6: 
          { addToken(Token.OPERATOR);
          }
        case 44: break;
        case 8: 
          { 
          }
        case 45: break;
        case 9: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 46: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 268: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 269: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 270: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
