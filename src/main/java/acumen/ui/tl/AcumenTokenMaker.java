/* The following code was generated by JFlex 1.4.1 on 11/16/12 3:09 PM */

/*
 * Generated on 11/16/12 3:09 PM
 */
package acumen.ui.tl;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class AcumenTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\10\1\0\1\20\1\16\22\0\1\20\1\27\1\15"+
    "\1\17\1\1\1\35\1\64\1\7\2\33\1\65\1\32\1\27\1\25"+
    "\1\23\1\21\1\4\1\6\1\61\1\6\4\6\2\3\1\45\1\27"+
    "\1\70\1\67\1\72\1\27\1\30\2\5\1\47\1\52\2\5\24\1"+
    "\1\71\1\11\1\31\1\66\1\2\1\0\1\54\1\14\1\53\1\56"+
    "\1\24\1\42\1\62\1\36\1\43\2\1\1\44\1\55\1\51\1\50"+
    "\1\40\1\63\1\13\1\41\1\37\1\12\1\57\1\46\1\22\1\60"+
    "\1\1\1\26\1\73\1\26\1\34\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\3\1\1\6\1\7\1\6\7\1\1\6\7\1\5\6"+
    "\1\10\1\11\3\10\1\0\1\12\1\0\2\12\1\1"+
    "\2\4\1\13\1\14\1\1\1\15\3\1\1\0\12\1"+
    "\1\16\14\1\6\0\1\15\1\0\1\17\1\1\1\4"+
    "\1\20\1\4\1\21\14\1\6\0\1\1\1\4\10\1"+
    "\2\0\1\22\1\0\1\4\4\1\3\0\1\4\3\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\170\0\u0168"+
    "\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\170\0\170"+
    "\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0"+
    "\0\u0348\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654"+
    "\0\u0690\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc\0\170\0\u07f8"+
    "\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8"+
    "\0\u0a14\0\u0a50\0\170\0\170\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40"+
    "\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20"+
    "\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\264\0\u0e4c\0\u0e88\0\u0ec4"+
    "\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4"+
    "\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284"+
    "\0\u12c0\0\u099c\0\u12fc\0\u1338\0\170\0\u1374\0\264\0\u13b0"+
    "\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590"+
    "\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770"+
    "\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950"+
    "\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30"+
    "\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1ab8\0\u1c98\0\u1cd4"+
    "\0\u1d10\0\u1d4c\0\u1d88";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\4\1\5\1\3\1\7"+
    "\1\3\1\4\1\10\1\4\1\11\2\3\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\3\1\17\1\20"+
    "\1\21\1\20\1\22\1\17\1\4\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\4\1\32\1\4\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\2\4\1\5\2\4"+
    "\1\41\2\17\1\42\1\43\1\20\1\44\1\45\10\46"+
    "\1\47\25\46\1\50\3\46\1\51\3\46\1\52\25\46"+
    "\75\0\6\4\2\0\1\53\3\4\5\0\1\4\1\0"+
    "\1\4\11\0\7\4\1\0\16\4\10\0\3\54\2\5"+
    "\1\54\1\5\2\0\4\54\2\0\1\54\2\0\1\54"+
    "\1\55\1\56\3\0\1\54\5\0\7\54\1\0\13\54"+
    "\1\5\2\54\10\0\3\54\2\5\1\54\1\5\2\0"+
    "\4\54\2\0\1\54\2\0\1\57\1\55\1\56\3\0"+
    "\1\54\5\0\7\54\1\0\13\54\1\5\2\54\11\0"+
    "\6\4\2\0\1\53\3\4\5\0\1\4\1\0\1\4"+
    "\11\0\7\4\1\0\2\4\1\60\13\4\10\0\10\11"+
    "\1\61\1\62\3\11\1\63\56\11\20\0\1\12\74\0"+
    "\1\64\53\0\6\4\2\0\1\53\3\4\5\0\1\4"+
    "\1\0\1\4\11\0\7\4\1\0\2\4\1\65\13\4"+
    "\13\0\2\66\1\0\1\66\12\0\1\17\1\0\1\17"+
    "\1\0\1\17\4\0\1\17\26\0\1\66\3\0\2\17"+
    "\6\0\6\4\2\0\1\53\3\4\5\0\1\67\1\0"+
    "\1\4\11\0\6\4\1\70\1\0\3\4\1\71\12\4"+
    "\31\0\1\72\141\0\1\17\5\0\6\4\2\0\1\53"+
    "\1\4\1\73\1\4\5\0\1\4\1\0\1\74\11\0"+
    "\7\4\1\0\12\4\1\75\3\4\11\0\6\4\2\0"+
    "\1\53\1\4\1\76\1\4\5\0\1\4\1\0\1\4"+
    "\11\0\7\4\1\0\16\4\11\0\6\4\2\0\1\53"+
    "\1\77\2\4\5\0\1\4\1\0\1\4\11\0\5\4"+
    "\1\100\1\4\1\0\1\101\14\4\1\102\11\0\6\4"+
    "\2\0\1\53\3\4\5\0\1\4\1\0\1\4\11\0"+
    "\7\4\1\0\2\4\1\103\3\4\1\104\7\4\11\0"+
    "\6\4\2\0\1\53\3\4\5\0\1\4\1\0\1\4"+
    "\11\0\4\4\1\105\2\4\1\0\3\4\1\105\12\4"+
    "\11\0\6\4\2\0\1\53\3\4\5\0\1\4\1\0"+
    "\1\4\11\0\7\4\1\0\2\4\1\106\13\4\11\0"+
    "\6\4\2\0\1\53\3\4\5\0\1\4\1\0\1\4"+
    "\11\0\7\4\1\0\2\4\1\107\13\4\11\0\6\4"+
    "\2\0\1\53\3\4\5\0\1\4\1\0\1\4\11\0"+
    "\7\4\1\0\2\4\1\110\13\4\11\0\6\4\2\0"+
    "\1\53\3\4\5\0\1\4\1\0\1\4\11\0\5\4"+
    "\1\111\1\4\1\0\16\4\11\0\6\4\2\0\1\53"+
    "\1\4\1\112\1\4\5\0\1\4\1\0\1\4\11\0"+
    "\6\4\1\113\1\0\2\4\1\114\3\4\1\70\7\4"+
    "\11\0\6\4\2\0\1\53\2\4\1\114\5\0\1\4"+
    "\1\0\1\4\11\0\1\4\1\115\1\4\1\116\3\4"+
    "\1\0\5\4\1\117\10\4\11\0\6\4\2\0\1\53"+
    "\3\4\5\0\1\4\1\0\1\4\11\0\7\4\1\0"+
    "\2\4\1\120\13\4\11\0\6\4\2\0\1\53\3\4"+
    "\5\0\1\4\1\0\1\4\11\0\7\4\1\0\2\4"+
    "\1\121\13\4\74\0\1\17\76\0\1\17\1\0\1\122"+
    "\71\0\2\17\72\0\1\17\2\0\1\17\74\0\1\17"+
    "\10\46\1\0\25\46\1\0\3\46\1\0\3\46\1\0"+
    "\25\46\37\0\1\123\73\0\1\124\3\0\1\125\76\0"+
    "\1\126\37\0\1\127\61\0\7\54\2\0\4\54\2\0"+
    "\1\54\2\0\1\54\1\0\1\54\3\0\1\54\5\0"+
    "\7\54\1\0\16\54\13\0\2\66\1\0\1\66\52\0"+
    "\1\66\12\0\3\54\2\130\1\54\1\130\2\0\4\54"+
    "\2\0\1\54\2\0\1\54\1\0\1\54\1\131\2\0"+
    "\1\54\1\0\1\131\3\0\7\54\1\0\13\54\1\130"+
    "\2\54\10\0\3\54\4\132\2\0\3\54\1\132\2\0"+
    "\1\54\2\0\1\54\1\0\1\132\3\0\1\54\5\0"+
    "\4\54\1\132\2\54\1\0\1\54\1\132\2\54\3\132"+
    "\1\54\1\132\2\54\1\132\2\54\11\0\6\4\2\0"+
    "\1\53\1\133\2\4\5\0\1\4\1\0\1\4\11\0"+
    "\7\4\1\0\16\4\10\0\11\61\1\134\3\61\1\135"+
    "\62\61\1\11\1\61\2\11\1\0\1\11\1\136\3\11"+
    "\21\61\1\11\2\61\1\11\6\61\1\11\7\61\1\11"+
    "\12\61\1\0\6\4\2\0\1\53\1\4\1\137\1\4"+
    "\5\0\1\4\1\0\1\4\11\0\7\4\1\0\16\4"+
    "\10\0\3\54\2\66\1\54\1\66\2\0\4\54\2\0"+
    "\1\54\2\0\1\54\1\0\1\56\3\0\1\54\5\0"+
    "\7\54\1\0\13\54\1\66\2\54\11\0\6\4\2\0"+
    "\1\53\3\4\5\0\1\4\1\0\1\4\11\0\2\4"+
    "\1\137\4\4\1\0\16\4\11\0\6\4\2\0\1\53"+
    "\3\4\5\0\1\4\1\0\1\4\11\0\3\4\1\140"+
    "\3\4\1\0\16\4\11\0\6\4\2\0\1\53\3\4"+
    "\5\0\1\4\1\0\1\4\11\0\7\4\1\0\10\4"+
    "\1\105\5\4\35\0\1\17\47\0\6\4\2\0\1\53"+
    "\1\140\2\4\5\0\1\4\1\0\1\4\11\0\7\4"+
    "\1\0\16\4\11\0\6\4\2\0\1\53\1\4\1\141"+
    "\1\4\5\0\1\4\1\0\1\4\11\0\7\4\1\0"+
    "\16\4\11\0\6\4\2\0\1\53\3\4\5\0\1\4"+
    "\1\0\1\4\11\0\2\4\1\140\4\4\1\0\16\4"+
    "\11\0\6\4\2\0\1\53\3\4\5\0\1\4\1\0"+
    "\1\4\11\0\5\4\1\142\1\4\1\0\16\4\11\0"+
    "\6\4\2\0\1\53\3\4\5\0\1\4\1\0\1\4"+
    "\11\0\7\4\1\0\7\4\1\105\6\4\11\0\6\4"+
    "\2\0\1\53\3\4\5\0\1\4\1\0\1\4\11\0"+
    "\7\4\1\0\3\4\1\137\12\4\11\0\6\4\2\0"+
    "\1\53\3\4\5\0\1\4\1\0\1\4\11\0\5\4"+
    "\1\143\1\4\1\0\16\4\11\0\6\4\2\0\1\53"+
    "\1\4\1\121\1\4\5\0\1\4\1\0\1\4\11\0"+
    "\7\4\1\0\16\4\11\0\6\4\2\0\1\53\1\4"+
    "\1\105\1\4\5\0\1\4\1\0\1\4\11\0\7\4"+
    "\1\0\16\4\11\0\6\4\2\0\1\53\3\4\5\0"+
    "\1\4\1\0\1\4\11\0\6\4\1\70\1\0\16\4"+
    "\11\0\6\4\2\0\1\53\3\4\5\0\1\4\1\0"+
    "\1\4\11\0\7\4\1\0\14\4\1\137\1\4\11\0"+
    "\6\4\2\0\1\53\3\4\5\0\1\4\1\0\1\4"+
    "\11\0\7\4\1\0\3\4\1\144\12\4\11\0\6\4"+
    "\2\0\1\53\1\4\1\145\1\4\5\0\1\4\1\0"+
    "\1\4\11\0\1\4\1\137\5\4\1\0\3\4\1\140"+
    "\12\4\11\0\6\4\2\0\1\53\3\4\5\0\1\4"+
    "\1\0\1\4\11\0\3\4\1\146\3\4\1\0\16\4"+
    "\11\0\6\4\2\0\1\53\3\4\5\0\1\4\1\0"+
    "\1\147\11\0\7\4\1\0\2\4\1\150\13\4\11\0"+
    "\6\4\2\0\1\53\3\4\5\0\1\4\1\0\1\4"+
    "\11\0\7\4\1\0\6\4\1\151\7\4\11\0\6\4"+
    "\2\0\1\53\3\4\5\0\1\4\1\0\1\4\11\0"+
    "\3\4\1\137\3\4\1\0\16\4\11\0\6\4\2\0"+
    "\1\53\3\4\5\0\1\4\1\0\1\4\11\0\7\4"+
    "\1\0\6\4\1\152\7\4\11\0\6\4\2\0\1\53"+
    "\3\4\5\0\1\4\1\0\1\4\11\0\3\4\1\153"+
    "\1\4\1\100\1\4\1\0\16\4\11\0\6\4\2\0"+
    "\1\53\3\4\5\0\1\4\1\0\1\4\11\0\7\4"+
    "\1\0\2\4\1\114\13\4\11\0\6\4\2\0\1\53"+
    "\3\4\5\0\1\4\1\0\1\4\11\0\7\4\1\0"+
    "\11\4\1\140\4\4\11\0\6\4\2\0\1\53\3\4"+
    "\5\0\1\4\1\0\1\4\11\0\1\4\1\137\5\4"+
    "\1\0\16\4\47\0\1\154\3\0\1\154\67\0\1\155"+
    "\74\0\1\156\77\0\1\157\75\0\1\160\30\0\4\161"+
    "\5\0\1\161\7\0\1\161\15\0\1\161\4\0\1\161"+
    "\2\0\3\161\1\0\1\161\2\0\1\161\12\0\3\54"+
    "\2\130\1\54\1\130\2\0\4\54\2\0\1\54\2\0"+
    "\1\54\1\0\1\54\3\0\1\54\5\0\7\54\1\0"+
    "\13\54\1\130\2\54\13\0\2\130\1\0\1\130\52\0"+
    "\1\130\13\0\6\4\2\0\1\53\3\4\5\0\1\4"+
    "\1\0\1\4\11\0\7\4\1\0\3\4\1\162\12\4"+
    "\10\0\10\61\1\0\66\61\4\163\2\61\1\134\2\61"+
    "\1\163\1\135\6\61\1\163\15\61\1\163\4\61\1\163"+
    "\2\61\3\163\1\61\1\163\2\61\1\163\12\61\1\0"+
    "\6\4\2\0\1\53\3\4\5\0\1\4\1\0\1\105"+
    "\11\0\7\4\1\0\16\4\11\0\6\4\2\0\1\53"+
    "\3\4\5\0\1\4\1\0\1\4\11\0\7\4\1\0"+
    "\7\4\1\164\6\4\11\0\6\4\2\0\1\53\3\4"+
    "\5\0\1\4\1\0\1\4\11\0\7\4\1\0\11\4"+
    "\1\147\4\4\11\0\6\4\2\0\1\53\3\4\5\0"+
    "\1\4\1\0\1\4\11\0\1\4\1\165\5\4\1\0"+
    "\16\4\11\0\6\4\2\0\1\53\3\4\5\0\1\4"+
    "\1\0\1\4\11\0\1\4\1\166\5\4\1\0\16\4"+
    "\11\0\6\4\2\0\1\53\3\4\5\0\1\4\1\0"+
    "\1\4\11\0\7\4\1\0\7\4\1\137\6\4\11\0"+
    "\6\4\2\0\1\53\3\4\5\0\1\4\1\0\1\4"+
    "\11\0\7\4\1\0\5\4\1\167\10\4\11\0\6\4"+
    "\2\0\1\53\3\4\5\0\1\4\1\0\1\4\11\0"+
    "\7\4\1\0\6\4\1\170\7\4\11\0\6\4\2\0"+
    "\1\53\3\4\5\0\1\4\1\0\1\4\11\0\3\4"+
    "\1\114\3\4\1\0\16\4\11\0\6\4\2\0\1\53"+
    "\3\4\5\0\1\4\1\0\1\4\11\0\3\4\1\171"+
    "\3\4\1\0\16\4\11\0\6\4\2\0\1\53\3\4"+
    "\5\0\1\4\1\0\1\4\11\0\7\4\1\0\3\4"+
    "\1\172\12\4\11\0\6\4\2\0\1\53\1\173\2\4"+
    "\5\0\1\4\1\0\1\4\11\0\7\4\1\0\16\4"+
    "\41\0\1\17\102\0\1\174\100\0\1\175\52\0\1\156"+
    "\72\0\1\176\53\0\4\177\5\0\1\177\7\0\1\177"+
    "\15\0\1\177\4\0\1\177\2\0\3\177\1\0\1\177"+
    "\2\0\1\177\13\0\6\4\2\0\1\53\3\4\5\0"+
    "\1\4\1\0\1\4\11\0\7\4\1\0\10\4\1\137"+
    "\5\4\10\0\3\61\4\200\2\61\1\134\2\61\1\200"+
    "\1\135\6\61\1\200\15\61\1\200\4\61\1\200\2\61"+
    "\3\200\1\61\1\200\2\61\1\200\12\61\1\0\6\4"+
    "\2\0\1\53\3\4\5\0\1\4\1\0\1\4\11\0"+
    "\5\4\1\201\1\4\1\0\16\4\11\0\6\4\2\0"+
    "\1\53\3\4\5\0\1\4\1\0\1\4\11\0\7\4"+
    "\1\0\5\4\1\202\10\4\11\0\6\4\2\0\1\53"+
    "\3\4\5\0\1\4\1\0\1\4\11\0\5\4\1\203"+
    "\1\4\1\0\16\4\11\0\6\4\2\0\1\53\1\4"+
    "\1\204\1\4\5\0\1\4\1\0\1\4\11\0\7\4"+
    "\1\0\16\4\11\0\6\4\2\0\1\53\3\4\5\0"+
    "\1\4\1\0\1\4\11\0\1\4\1\140\5\4\1\0"+
    "\16\4\11\0\6\4\2\0\1\53\3\4\5\0\1\4"+
    "\1\0\1\4\11\0\3\4\1\105\3\4\1\0\16\4"+
    "\11\0\6\4\2\0\1\53\3\4\5\0\1\4\1\0"+
    "\1\4\11\0\7\4\1\0\13\4\1\137\2\4\11\0"+
    "\6\4\2\0\1\53\3\4\5\0\1\4\1\0\1\4"+
    "\11\0\7\4\1\0\7\4\1\140\6\4\51\0\1\156"+
    "\3\0\1\175\47\0\1\205\53\0\1\176\1\206\4\176"+
    "\1\206\2\0\3\176\2\0\1\206\1\0\2\176\1\206"+
    "\1\176\1\206\1\0\7\206\7\176\1\206\16\176\2\206"+
    "\1\0\1\206\1\0\1\206\5\0\4\207\5\0\1\207"+
    "\7\0\1\207\15\0\1\207\4\0\1\207\2\0\3\207"+
    "\1\0\1\207\2\0\1\207\12\0\3\61\4\210\2\61"+
    "\1\134\2\61\1\210\1\135\6\61\1\210\15\61\1\210"+
    "\4\61\1\210\2\61\3\210\1\61\1\210\2\61\1\210"+
    "\12\61\1\0\6\4\2\0\1\53\3\4\5\0\1\4"+
    "\1\0\1\4\11\0\7\4\1\0\3\4\1\147\12\4"+
    "\11\0\6\4\2\0\1\53\3\4\5\0\1\4\1\0"+
    "\1\4\11\0\1\105\6\4\1\0\16\4\11\0\6\4"+
    "\2\0\1\53\3\4\5\0\1\4\1\0\1\4\11\0"+
    "\7\4\1\0\3\4\1\211\12\4\11\0\6\4\2\0"+
    "\1\53\3\4\5\0\1\4\1\0\1\170\11\0\7\4"+
    "\1\0\16\4\31\0\1\176\55\0\4\4\5\0\1\4"+
    "\7\0\1\4\15\0\1\4\4\0\1\4\2\0\3\4"+
    "\1\0\1\4\2\0\1\4\12\0\3\61\4\11\2\61"+
    "\1\134\2\61\1\11\1\135\6\61\1\11\15\61\1\11"+
    "\4\61\1\11\2\61\3\11\1\61\1\11\2\61\1\11"+
    "\12\61\1\0\6\4\2\0\1\53\1\212\2\4\5\0"+
    "\1\4\1\0\1\4\11\0\7\4\1\0\16\4\11\0"+
    "\6\4\2\0\1\53\3\4\5\0\1\4\1\0\1\4"+
    "\11\0\7\4\1\0\2\4\1\213\13\4\11\0\6\4"+
    "\2\0\1\53\1\171\2\4\5\0\1\4\1\0\1\4"+
    "\11\0\7\4\1\0\16\4\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7620];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\1\11\7\1\2\11\26\1\1\11"+
    "\3\1\1\0\1\1\1\0\5\1\2\11\5\1\1\0"+
    "\27\1\6\0\1\1\1\0\3\1\1\11\16\1\6\0"+
    "\12\1\2\0\1\1\1\0\5\1\3\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public AcumenTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			/* No multi-line comments */
			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new DefaultToken();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AcumenTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AcumenTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { addNullToken(); return firstToken;
          }
        case 19: break;
        case 5: 
          { addToken(Token.WHITESPACE);
          }
        case 20: break;
        case 15: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 21: break;
        case 16: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 22: break;
        case 13: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 23: break;
        case 14: 
          { addToken(Token.RESERVED_WORD);
          }
        case 24: break;
        case 7: 
          { addToken(Token.SEPARATOR);
          }
        case 25: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 26: break;
        case 9: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 27: break;
        case 12: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 28: break;
        case 17: 
          { addToken(Token.FUNCTION);
          }
        case 29: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 30: break;
        case 11: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 31: break;
        case 18: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 32: break;
        case 10: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 33: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 34: break;
        case 6: 
          { addToken(Token.OPERATOR);
          }
        case 35: break;
        case 8: 
          { 
          }
        case 36: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 140: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 141: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
